<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classplanning_1_1Planner" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>planning::Planner</compoundname>
    <derivedcompoundref refid="classplanning_1_1PlannerForCommandType" prot="public" virt="non-virtual">planning::PlannerForCommandType&lt; CollectCommand &gt;</derivedcompoundref>
    <derivedcompoundref refid="classplanning_1_1PlannerForCommandType" prot="public" virt="non-virtual">planning::PlannerForCommandType&lt; InterceptCommand &gt;</derivedcompoundref>
    <derivedcompoundref refid="classplanning_1_1PlannerForCommandType" prot="public" virt="non-virtual">planning::PlannerForCommandType&lt; PathTargetCommand &gt;</derivedcompoundref>
    <derivedcompoundref refid="classplanning_1_1PlannerForCommandType" prot="public" virt="non-virtual">planning::PlannerForCommandType&lt; PivotCommand &gt;</derivedcompoundref>
    <derivedcompoundref refid="classplanning_1_1PlannerForCommandType" prot="public" virt="non-virtual">planning::PlannerForCommandType&lt; planning::LineKickCommand &gt;</derivedcompoundref>
    <derivedcompoundref refid="classplanning_1_1PlannerForCommandType" prot="public" virt="non-virtual">planning::PlannerForCommandType&lt; SettleCommand &gt;</derivedcompoundref>
    <derivedcompoundref refid="classplanning_1_1EscapeObstaclesPathPlanner" prot="public" virt="non-virtual">planning::EscapeObstaclesPathPlanner</derivedcompoundref>
    <derivedcompoundref refid="classplanning_1_1PlannerForCommandType" prot="public" virt="non-virtual">planning::PlannerForCommandType&lt; CommandType &gt;</derivedcompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classplanning_1_1Planner_1a4de00d301a877cb20ce79477c0c8becf" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string planning::Planner::name_</definition>
        <argsstring></argsstring>
        <name>name_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/planner/planner.hpp" line="51" column="17" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/planner/planner.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classplanning_1_1Planner_1ade63e8fe5919753dddcdfce60289a4db" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>planning::Planner::Planner</definition>
        <argsstring>(std::string name)</argsstring>
        <name>Planner</name>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/planner/planner.hpp" line="11" column="14" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/planner/planner.hpp" bodystart="11" bodyend="11"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Planner_1aa3f85157362f54234fe961add1a0c2ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual planning::Planner::~Planner</definition>
        <argsstring>()=default</argsstring>
        <name>~Planner</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/planner/planner.hpp" line="12" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Planner_1a32a25b3aa79b38f3a40a3835444bb655" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>planning::Planner::Planner</definition>
        <argsstring>(Planner &amp;&amp;) noexcept=default</argsstring>
        <name>Planner</name>
        <param>
          <type><ref refid="classplanning_1_1Planner" kindref="compound">Planner</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/planner/planner.hpp" line="14" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Planner_1a5d25e229f428de27c7ab72fc2e5a1a5e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classplanning_1_1Planner" kindref="compound">Planner</ref> &amp;</type>
        <definition>Planner&amp; planning::Planner::operator=</definition>
        <argsstring>(Planner &amp;&amp;) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classplanning_1_1Planner" kindref="compound">Planner</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/planner/planner.hpp" line="15" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Planner_1a896421dcf5ec7cde31bfa1e66786dfe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>planning::Planner::Planner</definition>
        <argsstring>(const Planner &amp;)=default</argsstring>
        <name>Planner</name>
        <param>
          <type>const <ref refid="classplanning_1_1Planner" kindref="compound">Planner</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/planner/planner.hpp" line="16" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Planner_1ad0a51fdbb90de2f370b9dbf08f9850c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classplanning_1_1Planner" kindref="compound">Planner</ref> &amp;</type>
        <definition>Planner&amp; planning::Planner::operator=</definition>
        <argsstring>(const Planner &amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classplanning_1_1Planner" kindref="compound">Planner</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/planner/planner.hpp" line="17" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Planner_1a86c8ab838ec899e817bb7027072263f7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool planning::Planner::is_applicable</definition>
        <argsstring>(const MotionCommand &amp;command) const =0</argsstring>
        <name>is_applicable</name>
        <reimplementedby refid="classplanning_1_1EscapeObstaclesPathPlanner_1a3e8045c3b7d60b5a1d61f13f75bab5d2">is_applicable</reimplementedby>
        <reimplementedby refid="classplanning_1_1PlannerForCommandType_1a15adefc5f4fc9687dafe6b8014914365">is_applicable</reimplementedby>
        <reimplementedby refid="classplanning_1_1PlannerForCommandType_1a15adefc5f4fc9687dafe6b8014914365">is_applicable</reimplementedby>
        <reimplementedby refid="classplanning_1_1PlannerForCommandType_1a15adefc5f4fc9687dafe6b8014914365">is_applicable</reimplementedby>
        <reimplementedby refid="classplanning_1_1PlannerForCommandType_1a15adefc5f4fc9687dafe6b8014914365">is_applicable</reimplementedby>
        <reimplementedby refid="classplanning_1_1PlannerForCommandType_1a15adefc5f4fc9687dafe6b8014914365">is_applicable</reimplementedby>
        <reimplementedby refid="classplanning_1_1PlannerForCommandType_1a15adefc5f4fc9687dafe6b8014914365">is_applicable</reimplementedby>
        <reimplementedby refid="classplanning_1_1PlannerForCommandType_1a15adefc5f4fc9687dafe6b8014914365">is_applicable</reimplementedby>
        <param>
          <type>const MotionCommand &amp;</type>
          <declname>command</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether or not this command can be planned by this planner.</para>
<para>Implemented by PlannerForCommandType&lt;T&gt;</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>The command to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whether or not this planner can plan that type of command. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/planner/planner.hpp" line="27" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Planner_1ad199c20bdcb712ccd1580e5ec602437b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classplanning_1_1Trajectory" kindref="compound">Trajectory</ref></type>
        <definition>virtual Trajectory planning::Planner::plan</definition>
        <argsstring>(const PlanRequest &amp;request)=0</argsstring>
        <name>plan</name>
        <reimplementedby refid="classplanning_1_1LineKickPlanner_1a4b6526c6fbe26788456286d565620922">plan</reimplementedby>
        <reimplementedby refid="classplanning_1_1SettlePlanner_1a92c3c378477b44f6fb55e24aa0c7b834">plan</reimplementedby>
        <reimplementedby refid="classplanning_1_1CollectPlanner_1af46b46599dfa47604350fbff2d0c14b4">plan</reimplementedby>
        <reimplementedby refid="classplanning_1_1EscapeObstaclesPathPlanner_1ab718d94a97a01f55c3972a752bc8d658">plan</reimplementedby>
        <reimplementedby refid="classplanning_1_1PivotPathPlanner_1afbdfdfc654624d3b09d44b5342159a58">plan</reimplementedby>
        <reimplementedby refid="classplanning_1_1InterceptPlanner_1aa3d56a12247cf518b9b22c84f0f88014">plan</reimplementedby>
        <reimplementedby refid="classplanning_1_1PathTargetPlanner_1a392836905845d0a369829fe0146a96d8">plan</reimplementedby>
        <param>
          <type>const <ref refid="structplanning_1_1PlanRequest" kindref="compound">PlanRequest</ref> &amp;</type>
          <declname>request</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Plan a trajectory for this request. This is guaranteed to be a request that this planner is able to handle (according to <ref refid="classplanning_1_1Planner_1a86c8ab838ec899e817bb7027072263f7" kindref="member">is_applicable</ref>)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>request</parametername>
</parameternamelist>
<parameterdescription>
<para>The request to plan. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A trajectory for the robot to follow. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/planner/planner.hpp" line="37" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Planner_1a3801e1037f332cfb6abda304eec7c094" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void planning::Planner::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <reimplementedby refid="classplanning_1_1PivotPathPlanner_1ae62644c6451883a8f1c6db3a2937609b">reset</reimplementedby>
        <reimplementedby refid="classplanning_1_1PathTargetPlanner_1a1d3b78e80fb46fdd2ec58bc16da387a0">reset</reimplementedby>
        <reimplementedby refid="classplanning_1_1LineKickPlanner_1ac6b62640e9d19e4b75f5940d9a1b7454">reset</reimplementedby>
        <reimplementedby refid="classplanning_1_1SettlePlanner_1a1a510429ad25a6e468c883e375a59530">reset</reimplementedby>
        <reimplementedby refid="classplanning_1_1CollectPlanner_1a4d8398e215cbc86b2188db55fe280845">reset</reimplementedby>
        <reimplementedby refid="classplanning_1_1EscapeObstaclesPathPlanner_1a94f7b096dd419e42f43373176861135c">reset</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reset this planner. Called after the planner is <emphasis>not</emphasis> used to handle a given command for the robot. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/planner/planner.hpp" line="43" column="18" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/planner/planner.hpp" bodystart="43" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Planner_1a1de466640407759489cc9f74ac1e3aba" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string planning::Planner::name</definition>
        <argsstring>() const</argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a user-readable name for this planner. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/planner/planner.hpp" line="48" column="18" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/planner/planner.hpp" bodystart="48" bodyend="48"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="13">
        <label>planning::SettlePlanner</label>
        <link refid="classplanning_1_1SettlePlanner"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>planning::Planner</label>
        <link refid="classplanning_1_1Planner"/>
      </node>
      <node id="5">
        <label>planning::InterceptPlanner</label>
        <link refid="classplanning_1_1InterceptPlanner"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>planning::PlannerForCommandType&lt; SettleCommand &gt;</label>
        <link refid="classplanning_1_1PlannerForCommandType"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>planning::LineKickPlanner</label>
        <link refid="classplanning_1_1LineKickPlanner"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>planning::CollectPlanner</label>
        <link refid="classplanning_1_1CollectPlanner"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>planning::PlannerForCommandType&lt; PivotCommand &gt;</label>
        <link refid="classplanning_1_1PlannerForCommandType"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>planning::PlannerForCommandType&lt; InterceptCommand &gt;</label>
        <link refid="classplanning_1_1PlannerForCommandType"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>planning::PlannerForCommandType&lt; planning::LineKickCommand &gt;</label>
        <link refid="classplanning_1_1PlannerForCommandType"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>planning::PlannerForCommandType&lt; CollectCommand &gt;</label>
        <link refid="classplanning_1_1PlannerForCommandType"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>planning::PlannerForCommandType&lt; CommandType &gt;</label>
        <link refid="classplanning_1_1PlannerForCommandType"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>planning::PivotPathPlanner</label>
        <link refid="classplanning_1_1PivotPathPlanner"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>planning::PlannerForCommandType&lt; PathTargetCommand &gt;</label>
        <link refid="classplanning_1_1PlannerForCommandType"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>planning::PathTargetPlanner</label>
        <link refid="classplanning_1_1PathTargetPlanner"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>planning::EscapeObstaclesPathPlanner</label>
        <link refid="classplanning_1_1EscapeObstaclesPathPlanner"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/planner/planner.hpp" line="9" column="14" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/planner/planner.hpp" bodystart="9" bodyend="52"/>
    <listofallmembers>
      <member refid="classplanning_1_1Planner_1a86c8ab838ec899e817bb7027072263f7" prot="public" virt="pure-virtual"><scope>planning::Planner</scope><name>is_applicable</name></member>
      <member refid="classplanning_1_1Planner_1a1de466640407759489cc9f74ac1e3aba" prot="public" virt="non-virtual"><scope>planning::Planner</scope><name>name</name></member>
      <member refid="classplanning_1_1Planner_1a4de00d301a877cb20ce79477c0c8becf" prot="private" virt="non-virtual"><scope>planning::Planner</scope><name>name_</name></member>
      <member refid="classplanning_1_1Planner_1a5d25e229f428de27c7ab72fc2e5a1a5e" prot="public" virt="non-virtual"><scope>planning::Planner</scope><name>operator=</name></member>
      <member refid="classplanning_1_1Planner_1ad0a51fdbb90de2f370b9dbf08f9850c2" prot="public" virt="non-virtual"><scope>planning::Planner</scope><name>operator=</name></member>
      <member refid="classplanning_1_1Planner_1ad199c20bdcb712ccd1580e5ec602437b" prot="public" virt="pure-virtual"><scope>planning::Planner</scope><name>plan</name></member>
      <member refid="classplanning_1_1Planner_1ade63e8fe5919753dddcdfce60289a4db" prot="public" virt="non-virtual"><scope>planning::Planner</scope><name>Planner</name></member>
      <member refid="classplanning_1_1Planner_1a32a25b3aa79b38f3a40a3835444bb655" prot="public" virt="non-virtual"><scope>planning::Planner</scope><name>Planner</name></member>
      <member refid="classplanning_1_1Planner_1a896421dcf5ec7cde31bfa1e66786dfe7" prot="public" virt="non-virtual"><scope>planning::Planner</scope><name>Planner</name></member>
      <member refid="classplanning_1_1Planner_1a3801e1037f332cfb6abda304eec7c094" prot="public" virt="virtual"><scope>planning::Planner</scope><name>reset</name></member>
      <member refid="classplanning_1_1Planner_1aa3f85157362f54234fe961add1a0c2ee" prot="public" virt="virtual"><scope>planning::Planner</scope><name>~Planner</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
