<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespaceConvertRx" kind="namespace" language="C++">
    <compoundname>ConvertRx</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceConvertRx_1ad8e95589cb47a9ec2a3af5017fd2d8d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ConvertRx::rtp_to_status</definition>
        <argsstring>(const rtp::RobotStatusMessage &amp;rtp_message, RobotStatus *status)</argsstring>
        <name>rtp_to_status</name>
        <param>
          <type>const rtp::RobotStatusMessage &amp;</type>
          <declname>rtp_message</declname>
        </param>
        <param>
          <type><ref refid="structRobotStatus" kindref="compound">RobotStatus</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/radio/packet_convert.cpp" line="33" column="6" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/radio/packet_convert.cpp" bodystart="33" bodyend="56" declfile="/home/pnayak/robocup-software/soccer/src/soccer/radio/packet_convert.hpp" declline="37" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceConvertRx_1a49816d89ea32b36e33d8c9b514ec3d3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ConvertRx::sim_to_status</definition>
        <argsstring>(const RobotFeedback &amp;sim, RobotStatus *status)</argsstring>
        <name>sim_to_status</name>
        <param>
          <type>const RobotFeedback &amp;</type>
          <declname>sim</declname>
        </param>
        <param>
          <type><ref refid="structRobotStatus" kindref="compound">RobotStatus</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/radio/packet_convert.cpp" line="58" column="6" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/radio/packet_convert.cpp" bodystart="58" bodyend="81" declfile="/home/pnayak/robocup-software/soccer/src/soccer/radio/packet_convert.hpp" declline="39" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceConvertRx_1afa8efb574b382e08c90693e6186e89fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ConvertRx::status_to_proto</definition>
        <argsstring>(const RobotStatus &amp;status, Packet::RadioRx *proto)</argsstring>
        <name>status_to_proto</name>
        <param>
          <type>const <ref refid="structRobotStatus" kindref="compound">RobotStatus</ref> &amp;</type>
          <declname>status</declname>
        </param>
        <param>
          <type>Packet::RadioRx *</type>
          <declname>proto</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/radio/packet_convert.cpp" line="83" column="6" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/radio/packet_convert.cpp" bodystart="83" bodyend="127" declfile="/home/pnayak/robocup-software/soccer/src/soccer/radio/packet_convert.hpp" declline="41" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceConvertRx_1a044dc669eb3ec66ff9d4ce02ef6d2fbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ConvertRx::status_to_ros</definition>
        <argsstring>(const RobotStatus &amp;status, rj_msgs::msg::RobotStatus *msg)</argsstring>
        <name>status_to_ros</name>
        <param>
          <type>const <ref refid="structRobotStatus" kindref="compound">RobotStatus</ref> &amp;</type>
          <declname>status</declname>
        </param>
        <param>
          <type>rj_msgs::msg::RobotStatus *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/radio/packet_convert.cpp" line="128" column="6" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/radio/packet_convert.cpp" bodystart="128" bodyend="139" declfile="/home/pnayak/robocup-software/soccer/src/soccer/radio/packet_convert.hpp" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceConvertRx_1a30a9e5a72ed9bb33b982ec06406b7ad4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ConvertRx::ros_to_status</definition>
        <argsstring>(const rj_msgs::msg::RobotStatus &amp;msg, RobotStatus *status)</argsstring>
        <name>ros_to_status</name>
        <param>
          <type>const rj_msgs::msg::RobotStatus &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="structRobotStatus" kindref="compound">RobotStatus</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/radio/packet_convert.cpp" line="141" column="6" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/radio/packet_convert.cpp" bodystart="141" bodyend="157" declfile="/home/pnayak/robocup-software/soccer/src/soccer/radio/packet_convert.hpp" declline="45" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>There are several different structs used throughout our code used to represent the data sent to/from our robot.</para>
<para>For Rx (robot to soccer), this includes:<itemizedlist>
<listitem><para>RTP. This is the packed format we use to send to and from real robots</para>
</listitem><listitem><para>sim. This is a protobuf-based format used to communicate with sim</para>
</listitem><listitem><para><ref refid="structRobotStatus" kindref="compound">RobotStatus</ref>. This is the in-memory representation used in <ref refid="structContext" kindref="compound">Context</ref>.</para>
</listitem><listitem><para>Packet::RadioRx. This is the representation used in the log frame.</para>
</listitem></itemizedlist>
</para>
<para>For Tx (soccer to robot), the structs are similar with one exception: instead of a single equivalent to <ref refid="structRobotStatus" kindref="compound">RobotStatus</ref>, in-memory representations of Tx data is split across <ref refid="structRobotIntent" kindref="compound">RobotIntent</ref> and <ref refid="structMotionSetpoint" kindref="compound">MotionSetpoint</ref>. </para>
    </detaileddescription>
    <location file="/home/pnayak/robocup-software/soccer/src/soccer/radio/packet_convert.cpp" line="31" column="19"/>
  </compounddef>
</doxygen>
