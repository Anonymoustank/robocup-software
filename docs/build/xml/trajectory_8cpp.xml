<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="trajectory_8cpp" kind="file" language="C++">
    <compoundname>trajectory.cpp</compoundname>
    <includes refid="trajectory_8hpp" local="yes">trajectory.hpp</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">rj_geometry/pose.hpp</includes>
    <includes refid="instant_8hpp" local="yes">instant.hpp</includes>
    <incdepgraph>
      <node id="15">
        <label>QMap</label>
      </node>
      <node id="22">
        <label>rj_msgs/msg/linear_motion_instant.hpp</label>
      </node>
      <node id="5">
        <label>rj_msgs/msg/trajectory.hpp</label>
      </node>
      <node id="7">
        <label>rj_protos/LogFrame.pb.h</label>
      </node>
      <node id="13">
        <label>rj_geometry/shape_set.hpp</label>
      </node>
      <node id="8">
        <label>rj_geometry/arc.hpp</label>
      </node>
      <node id="26">
        <label>stdexcept</label>
      </node>
      <node id="2">
        <label>trajectory.hpp</label>
        <link refid="trajectory_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>string</label>
      </node>
      <node id="9">
        <label>rj_geometry/composite_shape.hpp</label>
      </node>
      <node id="10">
        <label>rj_geometry/point.hpp</label>
      </node>
      <node id="21">
        <label>rj_geometry/geometry_conversions.hpp</label>
      </node>
      <node id="4">
        <label>rj_geometry/pose.hpp</label>
      </node>
      <node id="19">
        <label>instant.hpp</label>
        <link refid="instant_8hpp_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>planning/dynamic_obstacle.hpp</label>
        <link refid="dynamic__obstacle_8hpp_source"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>rj_geometry/polygon.hpp</label>
      </node>
      <node id="1">
        <label>/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.cpp</label>
        <link refid="trajectory_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>optional</label>
      </node>
      <node id="18">
        <label>vector</label>
      </node>
      <node id="14">
        <label>QColor</label>
      </node>
      <node id="6">
        <label>debug_drawer.hpp</label>
        <link refid="debug__drawer_8hpp_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>rj_geometry/circle.hpp</label>
      </node>
      <node id="12">
        <label>rj_geometry/segment.hpp</label>
      </node>
      <node id="16">
        <label>memory</label>
      </node>
      <node id="3">
        <label>rj_common/time.hpp</label>
      </node>
      <node id="23">
        <label>rj_msgs/msg/robot_instant.hpp</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceplanning">planning</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;trajectory.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;rj_geometry/pose.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;instant.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">planning<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>rj_geometry::Pose;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>rj_geometry::Twist;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal">Trajectory::Trajectory(Trajectory<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Trajectory&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a.empty()<sp/>||<sp/>b.empty())<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>splice<sp/>empty<sp/>trajectories&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>RobotInstant<sp/>a_end<sp/>=<sp/>a.last();</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>RobotInstant<sp/>b_begin<sp/>=<sp/>b.first();</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>rj_geometry::Point;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!a_end.position().near_point(b_begin.position(),<sp/>1e-6)<sp/>||</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!a_end.linear_velocity().near_point(b_begin.linear_velocity(),<sp/>1e-6)<sp/>||</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a_end.stamp<sp/>!=<sp/>b_begin.stamp)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a_end<sp/>=<sp/>b.first();</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>instants_<sp/>=<sp/>std::move(a.instants_);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>instants_.reserve(instants_.size()<sp/>+<sp/>b.instants_.size()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>instants_.insert(instants_.end(),<sp/>b.instants_.begin()<sp/>+<sp/>1,<sp/>b.instants_.end());</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>has_angle_profile_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>creation_stamp_<sp/>=<sp/>std::nullopt;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classplanning_1_1Trajectory_1a1904daf08c7f566432dc2def4c24ec94" kindref="member">Trajectory::append_instant</ref>(RobotInstant<sp/>instant)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classplanning_1_1Trajectory_1a359153dce0c741208d85570c52e2b4a2" kindref="member">empty</ref>()<sp/>&amp;&amp;<sp/>instant.stamp<sp/>&lt;=<sp/><ref refid="classplanning_1_1Trajectory_1a68f04e57ac6b9f1c7f827c724ed63065" kindref="member">end_time</ref>())<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>append<sp/>instant<sp/>at<sp/>or<sp/>before<sp/>the<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;last<sp/>instant<sp/>in<sp/>the<sp/>trajectory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>instants_.push_back(instant);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>not<sp/>profiled<sp/>correctly,<sp/>so<sp/>we<sp/>should<sp/>mark<sp/>the<sp/>entire</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>trajectory&apos;s<sp/>angle<sp/>profile<sp/>as<sp/>invalid.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>has_angle_profile_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>creation_stamp_<sp/>=<sp/>std::nullopt;</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classplanning_1_1Trajectory_1aed83fbf1cc9c16fc1f9b59e8ca2ba5b6" kindref="member">Trajectory::check_time</ref>(RJ::Time<sp/>time)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>time<sp/>&gt;=<sp/><ref refid="classplanning_1_1Trajectory_1a2d86901d130909aaebbbda99284f67c5" kindref="member">begin_time</ref>()<sp/>&amp;&amp;<sp/>time<sp/>&lt;=<sp/><ref refid="classplanning_1_1Trajectory_1a68f04e57ac6b9f1c7f827c724ed63065" kindref="member">end_time</ref>();</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classplanning_1_1Trajectory_1a229c0d2f534bb5d6b765e388a8a4a879" kindref="member">Trajectory::check_seconds</ref>(RJ::Seconds<sp/>seconds)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>seconds<sp/>&gt;=<sp/>0s<sp/>&amp;&amp;<sp/>seconds<sp/>&lt;=<sp/><ref refid="classplanning_1_1Trajectory_1a54ddb10176574d9d074e0d94dfdbe736" kindref="member">duration</ref>();</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classplanning_1_1Trajectory_1a5d5a6c7272fb71d98d13fcb485c50325" kindref="member">Trajectory::scale_duration</ref>(RJ::Seconds<sp/>final_duration)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>even<sp/>though<sp/>this<sp/>modifies<sp/>the<sp/>trajectory,<sp/>it<sp/>does<sp/>not<sp/>break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>angle<sp/>planning<sp/>and<sp/>so<sp/>we<sp/>do<sp/>not<sp/>need<sp/>to<sp/>mark<sp/>the<sp/>angle<sp/>profile<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>invalid.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classplanning_1_1Trajectory_1a5d5a6c7272fb71d98d13fcb485c50325" kindref="member">scale_duration</ref>(final_duration,<sp/><ref refid="classplanning_1_1Trajectory_1a2d86901d130909aaebbbda99284f67c5" kindref="member">begin_time</ref>());</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classplanning_1_1Trajectory_1a5d5a6c7272fb71d98d13fcb485c50325" kindref="member">Trajectory::scale_duration</ref>(RJ::Seconds<sp/>final_duration,<sp/>RJ::Time<sp/>fixed_point)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>even<sp/>though<sp/>this<sp/>modifies<sp/>the<sp/>trajectory,<sp/>it<sp/>does<sp/>not<sp/>break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>angle<sp/>planning<sp/>and<sp/>so<sp/>we<sp/>do<sp/>not<sp/>need<sp/>to<sp/>mark<sp/>the<sp/>angle<sp/>profile<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>invalid.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>multiplier<sp/>=<sp/>final_duration<sp/>/<sp/><ref refid="classplanning_1_1Trajectory_1a54ddb10176574d9d074e0d94dfdbe736" kindref="member">duration</ref>();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(RobotInstant&amp;<sp/>instant<sp/>:<sp/>instants_)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instant.velocity<sp/>/=<sp/>multiplier;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instant.stamp<sp/>=<sp/>fixed_point<sp/>+<sp/>RJ::Seconds(instant.stamp<sp/>-<sp/>fixed_point)<sp/>*<sp/>multiplier;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>creation_stamp_<sp/>=<sp/>std::nullopt;</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal">std::optional&lt;RobotInstant&gt;<sp/><ref refid="classplanning_1_1Trajectory_1afddc56fe0b0ce5d21ad6f4433709b55f" kindref="member">Trajectory::evaluate</ref>(RJ::Seconds<sp/>seconds)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classplanning_1_1Trajectory_1afddc56fe0b0ce5d21ad6f4433709b55f" kindref="member">evaluate</ref>(<ref refid="classplanning_1_1Trajectory_1a2d86901d130909aaebbbda99284f67c5" kindref="member">begin_time</ref>()<sp/>+<sp/>seconds);</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal">std::optional&lt;RobotInstant&gt;<sp/><ref refid="classplanning_1_1Trajectory_1afddc56fe0b0ce5d21ad6f4433709b55f" kindref="member">Trajectory::evaluate</ref>(RJ::Time<sp/>time)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(instants_.empty()<sp/>||<sp/>!<ref refid="classplanning_1_1Trajectory_1aed83fbf1cc9c16fc1f9b59e8ca2ba5b6" kindref="member">check_time</ref>(time))<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::nullopt;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>Cursor<sp/><ref refid="classplanning_1_1Trajectory_1a1e525a2d89ef3d9d1f061245f2a27046" kindref="member">cursor</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classplanning_1_1Trajectory_1a1e525a2d89ef3d9d1f061245f2a27046" kindref="member">cursor</ref>.<ref refid="classplanning_1_1Trajectory_1_1Cursor_1a59642df7c131a839993596dfc300238e" kindref="member">seek</ref>(time);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classplanning_1_1Trajectory_1a1e525a2d89ef3d9d1f061245f2a27046" kindref="member">cursor</ref>.<ref refid="classplanning_1_1Trajectory_1_1Cursor_1af08e577a6a80662c0fd2f84d7daa0275" kindref="member">value</ref>();</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal">RobotInstant<sp/><ref refid="classplanning_1_1Trajectory_1aaf9a8824c408e945122b37b031aa4ff8" kindref="member">Trajectory::interpolated_instant</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RobotInstant&amp;<sp/>prev_entry,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RobotInstant&amp;<sp/>next_entry,<sp/>RJ::Time<sp/>time)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(time<sp/>&lt;<sp/>prev_entry.stamp<sp/>||<sp/>time<sp/>&gt;<sp/>next_entry.stamp)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;Interpolant<sp/>time<sp/>is<sp/>not<sp/>between<sp/>prev_<sp/>and<sp/>next_<sp/>timestamps&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(time<sp/>==<sp/>prev_entry.stamp)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>prev_entry;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(time<sp/>==<sp/>next_entry.stamp)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>next_entry;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>RJ::Seconds<sp/>dt<sp/>=<sp/>next_entry.stamp<sp/>-<sp/>prev_entry.stamp;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>RJ::Seconds<sp/>elapsed<sp/>=<sp/>time<sp/>-<sp/>prev_entry.stamp;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>s<sp/>in<sp/>[0,<sp/>1]<sp/>is<sp/>the<sp/>interpolation<sp/>factor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>elapsed<sp/>/<sp/>dt;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>&lt;<sp/>0<sp/>||<sp/>s<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Interpolant<sp/>`s`<sp/>is<sp/>out<sp/>of<sp/>bounds!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>Pose<sp/>pose_0<sp/>=<sp/>prev_entry.pose;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>Pose<sp/>pose_1<sp/>=<sp/>next_entry.pose;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>Twist<sp/>tangent_0<sp/>=<sp/>prev_entry.velocity<sp/>*<sp/>RJ::num_seconds(dt);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>Twist<sp/>tangent_1<sp/>=<sp/>next_entry.velocity<sp/>*<sp/>RJ::num_seconds(dt);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cubic<sp/>interpolation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;ve<sp/>rescaled<sp/>the<sp/>problem<sp/>to<sp/>exist<sp/>in<sp/>the<sp/>range<sp/>[0,<sp/>1]<sp/>instead<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[t0,<sp/>t1]<sp/>by<sp/>adjusting<sp/>the<sp/>tangent<sp/>vectors,<sp/>so<sp/>now<sp/>we<sp/>can<sp/>interpolate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>using<sp/>a<sp/>Hermite<sp/>spline.<sp/>The<sp/>coefficients<sp/>for<sp/>`interpolated_pose`<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>found<sp/>at<sp/>https://en.wikipedia.org/wiki/Cubic_Hermite_spline.<sp/>The</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>coefficients<sp/>for<sp/>`interpolated_twist`<sp/>are<sp/>chosen<sp/>to<sp/>be<sp/>the<sp/>derivative<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>`interpolated_pose`<sp/>with<sp/>respect<sp/>to<sp/>s,<sp/>and<sp/>then<sp/>it<sp/>is<sp/>rescaled<sp/>to<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>time<sp/>derivative</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>Pose<sp/>interpolated_pose<sp/>=<sp/>Pose(Eigen::Vector3d(pose_0)<sp/>*<sp/>(2<sp/>*<sp/>s<sp/>*<sp/>s<sp/>*<sp/>s<sp/>-<sp/>3<sp/>*<sp/>s<sp/>*<sp/>s<sp/>+<sp/>1)<sp/>+</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3d(tangent_0)<sp/>*<sp/>(s<sp/>*<sp/>s<sp/>*<sp/>s<sp/>-<sp/>2<sp/>*<sp/>s<sp/>*<sp/>s<sp/>+<sp/>s)<sp/>+</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3d(pose_1)<sp/>*<sp/>(-2<sp/>*<sp/>s<sp/>*<sp/>s<sp/>*<sp/>s<sp/>+<sp/>3<sp/>*<sp/>s<sp/>*<sp/>s)<sp/>+</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3d(tangent_1)<sp/>*<sp/>(s<sp/>*<sp/>s<sp/>*<sp/>s<sp/>-<sp/>s<sp/>*<sp/>s));</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>Twist<sp/>interpolated_twist<sp/>=<sp/>Twist(Eigen::Vector3d(pose_0)<sp/>*<sp/>(6<sp/>*<sp/>s<sp/>*<sp/>s<sp/>-<sp/>6<sp/>*<sp/>s)<sp/>+</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3d(tangent_0)<sp/>*<sp/>(3<sp/>*<sp/>s<sp/>*<sp/>s<sp/>-<sp/>4<sp/>*<sp/>s<sp/>+<sp/>1)<sp/>+</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3d(pose_1)<sp/>*<sp/>(-6<sp/>*<sp/>s<sp/>*<sp/>s<sp/>+<sp/>6<sp/>*<sp/>s)<sp/>+</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3d(tangent_1)<sp/>*<sp/>(3<sp/>*<sp/>s<sp/>*<sp/>s<sp/>-<sp/>2<sp/>*<sp/>s))<sp/>/</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RJ::num_seconds(dt);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new<sp/>RobotInstant<sp/>with<sp/>the<sp/>correct<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RobotInstant{interpolated_pose,<sp/>interpolated_twist,<sp/>time};</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal">Trajectory<sp/><ref refid="classplanning_1_1Trajectory_1a96f2201ea5b6138ebc9043dd0367b32e" kindref="member">Trajectory::sub_trajectory</ref>(RJ::Time<sp/>clip_start_time,<sp/>RJ::Time<sp/>clip_end_time)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clip_start_time<sp/>&gt;<sp/>clip_end_time)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;End<sp/>time<sp/>must<sp/>not<sp/>come<sp/>before<sp/>start<sp/>time&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>Cursor<sp/><ref refid="classplanning_1_1Trajectory_1a1e525a2d89ef3d9d1f061245f2a27046" kindref="member">cursor</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>clip_start_time);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classplanning_1_1Trajectory_1a1e525a2d89ef3d9d1f061245f2a27046" kindref="member">cursor</ref>.<ref refid="classplanning_1_1Trajectory_1_1Cursor_1a6e4de2cd400d9f16baee3ff800071e17" kindref="member">has_value</ref>())<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;Sub-trajectory<sp/>start<sp/>time<sp/>is<sp/>outside<sp/>of<sp/>trajectory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>RJ::Time<sp/>actual_end<sp/>=<sp/>std::min(clip_end_time,<sp/><ref refid="classplanning_1_1Trajectory_1a68f04e57ac6b9f1c7f827c724ed63065" kindref="member">end_time</ref>());</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>start<sp/>and<sp/>end<sp/>times<sp/>are<sp/>identical,<sp/>we<sp/>are<sp/>trying<sp/>to<sp/>grab<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>infinitesimal<sp/>trajectory.<sp/>This<sp/>is<sp/>weird<sp/>but<sp/>technically<sp/>not<sp/>wrong.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clip_start_time<sp/>==<sp/>actual_end)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Trajectory({<ref refid="classplanning_1_1Trajectory_1a1e525a2d89ef3d9d1f061245f2a27046" kindref="member">cursor</ref>.<ref refid="classplanning_1_1Trajectory_1_1Cursor_1af08e577a6a80662c0fd2f84d7daa0275" kindref="member">value</ref>()});</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>RobotInstantSequence<sp/>result_instants;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(#1502):<sp/>Reserve<sp/>space<sp/>in<sp/>result_instants.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="classplanning_1_1Trajectory_1a1e525a2d89ef3d9d1f061245f2a27046" kindref="member">cursor</ref>.<ref refid="classplanning_1_1Trajectory_1_1Cursor_1a6e4de2cd400d9f16baee3ff800071e17" kindref="member">has_value</ref>()<sp/>&amp;&amp;<sp/><ref refid="classplanning_1_1Trajectory_1a1e525a2d89ef3d9d1f061245f2a27046" kindref="member">cursor</ref>.<ref refid="classplanning_1_1Trajectory_1_1Cursor_1af08e577a6a80662c0fd2f84d7daa0275" kindref="member">value</ref>().stamp<sp/>&lt;<sp/>actual_end)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result_instants.push_back(<ref refid="classplanning_1_1Trajectory_1a1e525a2d89ef3d9d1f061245f2a27046" kindref="member">cursor</ref>.<ref refid="classplanning_1_1Trajectory_1_1Cursor_1af08e577a6a80662c0fd2f84d7daa0275" kindref="member">value</ref>());</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classplanning_1_1Trajectory_1a1e525a2d89ef3d9d1f061245f2a27046" kindref="member">cursor</ref>.<ref refid="classplanning_1_1Trajectory_1_1Cursor_1aa4ca488626cbe6def7a90ccf5dad01b2" kindref="member">next_knot</ref>();</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>above<sp/>calculation<sp/>will<sp/>always<sp/>miss<sp/>the<sp/>last<sp/>instant.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>result_instants.push_back(</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classplanning_1_1Trajectory_1aaf9a8824c408e945122b37b031aa4ff8" kindref="member">Trajectory::interpolated_instant</ref>(result_instants.back(),<sp/><ref refid="classplanning_1_1Trajectory_1a1e525a2d89ef3d9d1f061245f2a27046" kindref="member">cursor</ref>.<ref refid="classplanning_1_1Trajectory_1_1Cursor_1af08e577a6a80662c0fd2f84d7daa0275" kindref="member">value</ref>(),<sp/>actual_end));</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Trajectory{std::move(result_instants)};</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal">Trajectory::Cursor<sp/><ref refid="classplanning_1_1Trajectory_1a1e525a2d89ef3d9d1f061245f2a27046" kindref="member">Trajectory::cursor</ref>(RJ::Time<sp/>start_time)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Cursor{*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>start_time};</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal">Trajectory::Cursor<sp/><ref refid="classplanning_1_1Trajectory_1ad3e98d04150557e85d6cc10e14535174" kindref="member">Trajectory::cursor_begin</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Cursor{*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>instants_.begin()};<sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classplanning_1_1Trajectory_1a5ba601a1dac51a755badedb24cce23d3" kindref="member">Trajectory::draw</ref>(<ref refid="classDebugDrawer" kindref="compound">DebugDrawer</ref>*<sp/>drawer,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::optional&lt;rj_geometry::Point&gt;<sp/>alt_text_position)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(instants_.size()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Packet::DebugRobotPath*<sp/>dbg_path<sp/>=<sp/>drawer-&gt;<ref refid="classDebugDrawer_1a68abc1557a2290fc1ec2a733a7097f0b" kindref="member">add_debug_path</ref>();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbg_path-&gt;set_layer(drawer-&gt;<ref refid="classDebugDrawer_1a49c41af0ba8514fa4c1b2ba555b25646" kindref="member">find_debug_layer</ref>(</highlight><highlight class="stringliteral">&quot;Motion&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RobotInstant&amp;<sp/>instant<sp/>:<sp/>instants_)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Packet::DebugRobotPath::DebugRobotPathPoint*<sp/>pt<sp/>=<sp/>dbg_path-&gt;add_points();</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pt-&gt;mutable_pos()<sp/>=<sp/>instant.pose.position();</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pt-&gt;mutable_vel()<sp/>=<sp/>instant.velocity.linear();</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(debug_text_)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rj_geometry::Point<sp/>text_pos;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>use<sp/>the<sp/>backup<sp/>position<sp/>if<sp/>there&apos;s<sp/>no<sp/>trajectory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classplanning_1_1Trajectory_1a359153dce0c741208d85570c52e2b4a2" kindref="member">empty</ref>())<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text_pos<sp/>=<sp/><ref refid="classplanning_1_1Trajectory_1a148140986277de8ff415202756305720" kindref="member">first</ref>().pose.position()<sp/>+<sp/>rj_geometry::Point(0.1,<sp/>0);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alt_text_position.has_value())<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text_pos<sp/>=<sp/>alt_text_position.value();</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drawer-&gt;draw_text(QString::fromStdString(debug_text_.value()),<sp/>text_pos,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QColor(100,<sp/>100,<sp/>255,<sp/>100),<sp/></highlight><highlight class="stringliteral">&quot;PlanningDebugText&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classplanning_1_1Trajectory_1acba6880797e3d9f3d8a82fd9045767f0" kindref="member">Trajectory::nearly_equal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Trajectory&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Trajectory&amp;<sp/>b,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tolerance)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a_it<sp/>=<sp/>a.instants_begin();</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>b_it<sp/>=<sp/>b.instants_begin();</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>a_it<sp/>!=<sp/>a.instants_end()<sp/>&amp;&amp;<sp/>b_it<sp/>!=<sp/>b.instants_end();<sp/>++a_it,<sp/>++b_it)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!RobotInstant::nearly_equals(*a_it,<sp/>*b_it,<sp/>tolerance))<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>more<sp/>time<sp/>to<sp/>go<sp/>in<sp/>either<sp/>trajectory,<sp/>they<sp/>are<sp/>different.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>they<sp/>are<sp/>identical.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_it<sp/>==<sp/>a.instants_end()<sp/>&amp;&amp;<sp/>b_it<sp/>==<sp/>b.instants_end();</highlight></codeline>
<codeline lineno="227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classplanning_1_1Trajectory_1a306fe22c35fd8c52706ab57e0a4abdc9" kindref="member">Trajectory::hold_for</ref>(RJ::Seconds<sp/>duration)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>RobotInstant<sp/>instant<sp/>=<sp/><ref refid="classplanning_1_1Trajectory_1a3dd24c057ec35affd3005f20b482c8a0" kindref="member">last</ref>();</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classplanning_1_1Trajectory_1a54ddb10176574d9d074e0d94dfdbe736" kindref="member">duration</ref><sp/>&lt;=<sp/>RJ::Seconds(0))<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;Hold<sp/>duration<sp/>must<sp/>be<sp/>positive&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Twist::nearly_equals(instant.velocity,<sp/>Twist::zero()))<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>hold<sp/>nonzero<sp/>velocity&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>instant.velocity<sp/>=<sp/>Twist::zero();</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>instant.stamp<sp/>=<sp/>instant.stamp<sp/>+<sp/><ref refid="classplanning_1_1Trajectory_1a54ddb10176574d9d074e0d94dfdbe736" kindref="member">duration</ref>;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Does<sp/>not<sp/>invalidate<sp/>angle<sp/>planning.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>instants_.push_back(instant);</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><ref refid="classplanning_1_1Trajectory_1_1Cursor_1a61ce777cf533439634838a8520fbef7e" kindref="member">Trajectory::Cursor::Cursor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Trajectory&amp;<sp/>trajectory,</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RobotInstantSequence::const_iterator<sp/>iterator)</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>trajectory_{trajectory},<sp/>iterator_{iterator},<sp/>time_{iterator-&gt;stamp}<sp/>{}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><ref refid="classplanning_1_1Trajectory_1_1Cursor_1a61ce777cf533439634838a8520fbef7e" kindref="member">Trajectory::Cursor::Cursor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Trajectory&amp;<sp/>trajectory)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>Cursor{trajectory,<sp/>trajectory.instants_.begin()}<sp/>{}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><ref refid="classplanning_1_1Trajectory_1_1Cursor_1a61ce777cf533439634838a8520fbef7e" kindref="member">Trajectory::Cursor::Cursor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Trajectory&amp;<sp/>trajectory,<sp/>RJ::Time<sp/>start_time)<sp/>:<sp/>Cursor{trajectory}<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>seek(start_time);</highlight></codeline>
<codeline lineno="254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal">RobotInstant<sp/><ref refid="classplanning_1_1Trajectory_1_1Cursor_1af08e577a6a80662c0fd2f84d7daa0275" kindref="member">Trajectory::Cursor::value</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>RobotInstant<sp/>instant_0<sp/>=<sp/>*iterator_;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(instant_0.stamp<sp/>==<sp/>time_)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>instant_0;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>RobotInstant<sp/>instant_1<sp/>=<sp/>*(iterator_<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classplanning_1_1Trajectory_1aaf9a8824c408e945122b37b031aa4ff8" kindref="member">Trajectory::interpolated_instant</ref>(instant_0,<sp/>instant_1,<sp/>time_);</highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classplanning_1_1Trajectory_1_1Cursor_1a59642df7c131a839993596dfc300238e" kindref="member">Trajectory::Cursor::seek</ref>(RJ::Time<sp/>time)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>are<sp/>seeking<sp/>past<sp/>the<sp/>end<sp/>(or<sp/>before<sp/>the<sp/>beginning)<sp/>it&apos;s<sp/>not<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>error,<sp/>we<sp/>just<sp/>don&apos;t<sp/>have<sp/>a<sp/>valid<sp/>value<sp/>anymore.<sp/>We<sp/>do<sp/>this<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>consistent<sp/>with<sp/>the<sp/>behavior<sp/>of<sp/>advance().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!trajectory_.check_time(time))<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_<sp/>=<sp/>time;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterator_<sp/>=<sp/>trajectory_.instants_end();</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>this<sp/>comparison<sp/>is<sp/>less<sp/>than<sp/>or<sp/>equal<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>compare_times<sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RobotInstant&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RobotInstant&amp;<sp/>b)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.stamp<sp/>&lt;=<sp/>b.stamp;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>RobotInstant<sp/>dummy_instant;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>dummy_instant.stamp<sp/>=<sp/>time;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::lower_bound<sp/>finds<sp/>the<sp/>first<sp/>iterator<sp/>such<sp/>that<sp/>the<sp/>above<sp/>comparison</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>_fails_<sp/>-<sp/>that<sp/>is,<sp/>the<sp/>first<sp/>instant<sp/>with<sp/>time<sp/>&lt;<sp/>instant.stamp.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>actually<sp/>want<sp/>the<sp/>_last_<sp/>instant<sp/>with<sp/>instant.stamp<sp/>&lt;=<sp/>time,<sp/>so<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>use<sp/>the<sp/>call<sp/>to<sp/>lower_bound<sp/>and<sp/>then<sp/>take<sp/>a<sp/>step<sp/>back.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator_<sp/>=<sp/>std::lower_bound(trajectory_.instants_.begin(),<sp/>trajectory_.instants_.end(),</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dummy_instant,<sp/>compare_times);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iterator_<sp/>==<sp/>trajectory_.instants_.begin())<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>seek<sp/>before<sp/>beginning<sp/>of<sp/>trajectory.<sp/>This<sp/>should<sp/>be<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;unreachable.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator_--;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>time_<sp/>=<sp/>time;</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classplanning_1_1Trajectory_1_1Cursor_1ab646848d550608fc0706f46159a69b00" kindref="member">Trajectory::Cursor::advance</ref>(RJ::Seconds<sp/>seconds)<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>time_<sp/>=<sp/>RJ::Time(time_<sp/>+<sp/>seconds);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!trajectory_.check_time(time_))<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_<sp/>=<sp/>RJ::Time::max();</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seconds<sp/>&lt;<sp/>RJ::Seconds(0))<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;Argument<sp/>`seconds`<sp/>must<sp/>not<sp/>be<sp/>negative.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we&apos;re<sp/>moving<sp/>forwards,<sp/>we<sp/>want<sp/>to<sp/>step<sp/>for<sp/>as<sp/>long<sp/>as<sp/>our<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>knot<sp/>point<sp/>is<sp/>_before<sp/>or<sp/>at_<sp/>the<sp/>target<sp/>time.<sp/>This<sp/>will<sp/>leave<sp/>us<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>step<sp/>one<sp/>past<sp/>the<sp/>proper<sp/>start<sp/>instant,<sp/>so<sp/>we<sp/>then<sp/>step<sp/>back.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(iterator_<sp/>!=<sp/>trajectory_.instants_.end()<sp/>&amp;&amp;<sp/>iterator_-&gt;stamp<sp/>&lt;=<sp/>time_)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterator_++;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iterator_<sp/>==<sp/>trajectory_.instants_.begin())<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>seek<sp/>before<sp/>beginning<sp/>of<sp/>trajectory.<sp/>This<sp/>should<sp/>be<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;unreachable.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator_--;</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classplanning_1_1Trajectory_1_1Cursor_1aa4ca488626cbe6def7a90ccf5dad01b2" kindref="member">Trajectory::Cursor::next_knot</ref>()<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iterator_<sp/>!=<sp/>trajectory_.instants_end())<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterator_++;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iterator_<sp/>==<sp/>trajectory_.instants_end())<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_<sp/>=<sp/>RJ::Time::max();</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_<sp/>=<sp/>iterator_-&gt;stamp;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>planning</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.cpp"/>
  </compounddef>
</doxygen>
