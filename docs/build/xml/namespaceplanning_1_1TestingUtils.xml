<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespaceplanning_1_1TestingUtils" kind="namespace" language="C++">
    <compoundname>planning::TestingUtils</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="testing__utils_8cpp_1acb7ba3cc3f428d992b943fd333571e1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool planning::TestingUtils::check_trajectory_continuous</definition>
        <argsstring>(const Trajectory &amp;trajectory, const RobotConstraints &amp;constraints)</argsstring>
        <name>check_trajectory_continuous</name>
        <param>
          <type>const <ref refid="classplanning_1_1Trajectory" kindref="compound">Trajectory</ref> &amp;</type>
          <declname>trajectory</declname>
        </param>
        <param>
          <type>const <ref refid="structplanning_1_1RobotConstraints" kindref="compound">RobotConstraints</ref> &amp;</type>
          <declname>constraints</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>test if a path is continuous and well behaved <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>constraints</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/tests/testing_utils.cpp" line="18" column="6" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/tests/testing_utils.cpp" bodystart="18" bodyend="71" declfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/tests/testing_utils.hpp" declline="15" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="testing__utils_8cpp_1a89d4c48018f2a01facdf2bfb3e6de53b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structplanning_1_1RobotInstant" kindref="compound">RobotInstant</ref></type>
        <definition>RobotInstant planning::TestingUtils::random_instant</definition>
        <argsstring>(std::mt19937 *generator)</argsstring>
        <name>random_instant</name>
        <param>
          <type>std::mt19937 *</type>
          <declname>generator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>generate a random <ref refid="structplanning_1_1RobotInstant" kindref="compound">RobotInstant</ref> inside the field <simplesect kind="return"><para>random robot instant </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/tests/testing_utils.cpp" line="73" column="14" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/tests/testing_utils.cpp" bodystart="73" bodyend="79" declfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/tests/testing_utils.hpp" declline="43" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="testing__utils_8hpp_1a5c19d75a58aad119922fc4465c749322" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T planning::TestingUtils::random</definition>
        <argsstring>(std::mt19937 *generator, T lo, T hi)</argsstring>
        <name>random</name>
        <param>
          <type>std::mt19937 *</type>
          <declname>generator</declname>
        </param>
        <param>
          <type>T</type>
          <declname>lo</declname>
        </param>
        <param>
          <type>T</type>
          <declname>hi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>generate a random number between lo and hi <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lo</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hi</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>random number </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/tests/testing_utils.hpp" line="25" column="3" declfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/tests/testing_utils.hpp" declline="25" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="testing__utils_8hpp_1a76f36a4466d391c54325ac53e7c26fad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>int</type>
        <definition>int planning::TestingUtils::random</definition>
        <argsstring>(std::mt19937 *generator, int lo, int hi)</argsstring>
        <name>random</name>
        <param>
          <type>std::mt19937 *</type>
          <declname>generator</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/tests/testing_utils.hpp" line="28" column="12" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/tests/testing_utils.hpp" bodystart="28" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="testing__utils_8hpp_1a181d1376c503577a7b8e7e17d0434e79" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>double</type>
        <definition>double planning::TestingUtils::random</definition>
        <argsstring>(std::mt19937 *generator, double lo, double hi)</argsstring>
        <name>random</name>
        <param>
          <type>std::mt19937 *</type>
          <declname>generator</declname>
        </param>
        <param>
          <type>double</type>
          <declname>lo</declname>
        </param>
        <param>
          <type>double</type>
          <declname>hi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/tests/testing_utils.hpp" line="34" column="15" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/tests/testing_utils.hpp" bodystart="34" bodyend="37"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/tests/testing_utils.cpp" line="12" column="32"/>
  </compounddef>
</doxygen>
