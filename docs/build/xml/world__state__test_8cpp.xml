<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="world__state__test_8cpp" kind="file" language="C++">
    <compoundname>world_state_test.cpp</compoundname>
    <includes local="no">random</includes>
    <includes local="no">gtest/gtest.h</includes>
    <includes refid="world__state_8hpp" local="no">world_state.hpp</includes>
    <includes local="no">rj_convert/testing/ros_convert_testing.hpp</includes>
    <incdepgraph>
      <node id="31">
        <label>QMap</label>
      </node>
      <node id="8">
        <label>rj_constants/constants.hpp</label>
      </node>
      <node id="21">
        <label>rj_msgs/msg/linear_motion_instant.hpp</label>
      </node>
      <node id="14">
        <label>fmt/format.h</label>
      </node>
      <node id="38">
        <label>rj_msgs/msg/trajectory.hpp</label>
      </node>
      <node id="12">
        <label>rj_msgs/msg/world_state.hpp</label>
      </node>
      <node id="24">
        <label>rj_protos/LogFrame.pb.h</label>
      </node>
      <node id="10">
        <label>rj_msgs/msg/ball_state.hpp</label>
      </node>
      <node id="16">
        <label>rj_param_utils/param.hpp</label>
      </node>
      <node id="29">
        <label>rj_geometry/shape_set.hpp</label>
      </node>
      <node id="25">
        <label>rj_geometry/arc.hpp</label>
      </node>
      <node id="4">
        <label>world_state.hpp</label>
        <link refid="world__state_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>planning/trajectory.hpp</label>
        <link refid="trajectory_8hpp_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>string</label>
      </node>
      <node id="26">
        <label>rj_geometry/composite_shape.hpp</label>
      </node>
      <node id="15">
        <label>rclcpp/rclcpp.hpp</label>
      </node>
      <node id="9">
        <label>rj_convert/ros_convert.hpp</label>
      </node>
      <node id="20">
        <label>rj_geometry/point.hpp</label>
      </node>
      <node id="5">
        <label>rj_geometry/geometry_conversions.hpp</label>
      </node>
      <node id="6">
        <label>rj_geometry/pose.hpp</label>
      </node>
      <node id="18">
        <label>planning/instant.hpp</label>
        <link refid="instant_8hpp_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>planning/dynamic_obstacle.hpp</label>
        <link refid="dynamic__obstacle_8hpp_source"/>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>rj_geometry/polygon.hpp</label>
      </node>
      <node id="2">
        <label>random</label>
      </node>
      <node id="13">
        <label>global_params.hpp</label>
        <link refid="global__params_8hpp_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>optional</label>
      </node>
      <node id="34">
        <label>vector</label>
      </node>
      <node id="3">
        <label>gtest/gtest.h</label>
      </node>
      <node id="30">
        <label>QColor</label>
      </node>
      <node id="23">
        <label>debug_drawer.hpp</label>
        <link refid="debug__drawer_8hpp_source"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>rj_param_utils/ros2_global_param_provider.hpp</label>
      </node>
      <node id="39">
        <label>rj_convert/testing/ros_convert_testing.hpp</label>
      </node>
      <node id="36">
        <label>rj_geometry/circle.hpp</label>
      </node>
      <node id="1">
        <label>/home/pnayak/robocup-software/soccer/testing/soccer/src/world_state_test.cpp</label>
        <link refid="world__state__test_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>rj_geometry/segment.hpp</label>
      </node>
      <node id="11">
        <label>rj_msgs/msg/robot_state.hpp</label>
      </node>
      <node id="32">
        <label>memory</label>
      </node>
      <node id="7">
        <label>rj_common/time.hpp</label>
      </node>
      <node id="22">
        <label>rj_msgs/msg/robot_instant.hpp</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="world__state__test_8cpp_1a53e6282f372ec17da20398717c11021e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structRobotState" kindref="compound">RobotState</ref></type>
        <definition>RobotState get_random_robot_state</definition>
        <argsstring>()</argsstring>
        <name>get_random_robot_state</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/testing/soccer/src/world_state_test.cpp" line="8" column="12" bodyfile="/home/pnayak/robocup-software/soccer/testing/soccer/src/world_state_test.cpp" bodystart="8" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="world__state__test_8cpp_1a0a1fb6985faeaa25e316b8aba1f65f5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structBallState" kindref="compound">BallState</ref></type>
        <definition>BallState get_random_ball_state</definition>
        <argsstring>()</argsstring>
        <name>get_random_ball_state</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/testing/soccer/src/world_state_test.cpp" line="26" column="11" bodyfile="/home/pnayak/robocup-software/soccer/testing/soccer/src/world_state_test.cpp" bodystart="26" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="world__state__test_8cpp_1a7d1afebd2cd6aa0931980f458f52d9f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structWorldState" kindref="compound">WorldState</ref></type>
        <definition>WorldState get_random_world_state</definition>
        <argsstring>()</argsstring>
        <name>get_random_world_state</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/testing/soccer/src/world_state_test.cpp" line="39" column="12" bodyfile="/home/pnayak/robocup-software/soccer/testing/soccer/src/world_state_test.cpp" bodystart="39" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="world__state__test_8cpp_1a92069ad3024630ab0c0ca8864e9b49e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const RobotState &amp;a, const RobotState &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structRobotState" kindref="compound">RobotState</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structRobotState" kindref="compound">RobotState</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/testing/soccer/src/world_state_test.cpp" line="60" column="6" bodyfile="/home/pnayak/robocup-software/soccer/testing/soccer/src/world_state_test.cpp" bodystart="60" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="world__state__test_8cpp_1adc1dc5b23dabd59444e09cd0f90c2a1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const BallState &amp;a, const BallState &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structBallState" kindref="compound">BallState</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structBallState" kindref="compound">BallState</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/testing/soccer/src/world_state_test.cpp" line="65" column="6" bodyfile="/home/pnayak/robocup-software/soccer/testing/soccer/src/world_state_test.cpp" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="world__state__test_8cpp_1abb95e2a739130d90448ba56a66efb802" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const WorldState &amp;a, const WorldState &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structWorldState" kindref="compound">WorldState</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structWorldState" kindref="compound">WorldState</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/testing/soccer/src/world_state_test.cpp" line="70" column="6" bodyfile="/home/pnayak/robocup-software/soccer/testing/soccer/src/world_state_test.cpp" bodystart="70" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="world__state__test_8cpp_1a32dee6e21b5ea0e4d196b479e33d2cc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ROSMsgConversionNoop, RobotState)</argsstring>
        <name>TEST</name>
        <param>
          <type>ROSMsgConversionNoop</type>
        </param>
        <param>
          <type><ref refid="structRobotState" kindref="compound">RobotState</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/testing/soccer/src/world_state_test.cpp" line="97" column="1" bodyfile="/home/pnayak/robocup-software/soccer/testing/soccer/src/world_state_test.cpp" bodystart="97" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="world__state__test_8cpp_1a311e48ad991f32d2576b03d292e06c8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ROSMsgConversionNoop, BallState)</argsstring>
        <name>TEST</name>
        <param>
          <type>ROSMsgConversionNoop</type>
        </param>
        <param>
          <type><ref refid="structBallState" kindref="compound">BallState</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/testing/soccer/src/world_state_test.cpp" line="101" column="1" bodyfile="/home/pnayak/robocup-software/soccer/testing/soccer/src/world_state_test.cpp" bodystart="101" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="world__state__test_8cpp_1a692aa5104f53fc4af979813ff1c46ef7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(ROSMsgConversionNoop, WorldState)</argsstring>
        <name>TEST</name>
        <param>
          <type>ROSMsgConversionNoop</type>
        </param>
        <param>
          <type><ref refid="structWorldState" kindref="compound">WorldState</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/testing/soccer/src/world_state_test.cpp" line="103" column="1" bodyfile="/home/pnayak/robocup-software/soccer/testing/soccer/src/world_state_test.cpp" bodystart="103" bodyend="105"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;random&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gtest/gtest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;world_state.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;rj_convert/testing/ros_convert_testing.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><ref refid="structRobotState" kindref="compound">RobotState</ref><sp/>get_random_robot_state()<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_device<sp/>rd;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>std::default_random_engine<sp/>e1(rd());</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uniform_real_distribution&lt;double&gt;<sp/>uniform(0.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rand<sp/>=<sp/>[&amp;]()<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>uniform(e1);<sp/>};</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rj_geometry::Point<sp/>position{rand(),<sp/>rand()};</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>heading<sp/>=<sp/>rand();</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rj_geometry::Point<sp/>linear{rand(),<sp/>rand()};</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angular<sp/>=<sp/>rand();</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RJ::Time<sp/>timestamp<sp/>=<sp/>RJ::now();</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>visible<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rj_geometry::Pose<sp/>pose{position,<sp/>heading};</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rj_geometry::Twist<sp/>twist{linear,<sp/>angular};</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structRobotState" kindref="compound">RobotState</ref>{pose,<sp/>twist,<sp/>timestamp,<sp/>visible};</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><ref refid="structBallState" kindref="compound">BallState</ref><sp/>get_random_ball_state()<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_device<sp/>rd;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>std::default_random_engine<sp/>e1(rd());</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uniform_real_distribution&lt;double&gt;<sp/>uniform(0.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rand<sp/>=<sp/>[&amp;]()<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>uniform(e1);<sp/>};</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rj_geometry::Point<sp/>position{rand(),<sp/>rand()};</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rj_geometry::Point<sp/>velocity{rand(),<sp/>rand()};</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RJ::Time<sp/>timestamp<sp/>=<sp/>RJ::now();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structBallState" kindref="compound">BallState</ref>{position,<sp/>velocity,<sp/>timestamp};</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><ref refid="structWorldState" kindref="compound">WorldState</ref><sp/>get_random_world_state()<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_device<sp/>rd;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>std::default_random_engine<sp/>e1(rd());</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uniform_int_distribution&lt;int&gt;<sp/>uniform(0,<sp/>10);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rand<sp/>=<sp/>[&amp;]()<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>uniform(e1);<sp/>};</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;RobotState&gt;<sp/>their_robots;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>rand();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>their_robots.emplace_back(get_random_robot_state());</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;RobotState&gt;<sp/>our_robots;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>rand();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>our_robots.emplace_back(get_random_robot_state());</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structBallState" kindref="compound">BallState</ref><sp/>ball_state<sp/>=<sp/>get_random_ball_state();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structWorldState" kindref="compound">WorldState</ref>{std::move(their_robots),<sp/>std::move(our_robots),<sp/>ball_state};</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structRobotState" kindref="compound">RobotState</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structRobotState" kindref="compound">RobotState</ref>&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.pose<sp/>==<sp/>b.pose<sp/>&amp;&amp;<sp/>a.velocity<sp/>==<sp/>b.velocity<sp/>&amp;&amp;<sp/>a.timestamp<sp/>==<sp/>b.timestamp<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.visible<sp/>==<sp/>b.visible;</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structBallState" kindref="compound">BallState</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structBallState" kindref="compound">BallState</ref>&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.position<sp/>==<sp/>b.position<sp/>&amp;&amp;<sp/>a.velocity<sp/>==<sp/>b.velocity<sp/>&amp;&amp;<sp/>a.timestamp<sp/>==<sp/>b.timestamp<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.visible<sp/>==<sp/>b.visible;</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structWorldState" kindref="compound">WorldState</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structWorldState" kindref="compound">WorldState</ref>&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>their_robots.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a.their_robots.size()<sp/>!=<sp/>b.their_robots.size())<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>robot_idx<sp/>=<sp/>0;<sp/>robot_idx<sp/>&lt;<sp/>a.their_robots.size();<sp/>robot_idx++)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(a.their_robots[robot_idx]<sp/>==<sp/>b.their_robots[robot_idx]))<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>our_robots.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a.our_robots.size()<sp/>!=<sp/>b.our_robots.size())<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>robot_idx<sp/>=<sp/>0;<sp/>robot_idx<sp/>&lt;<sp/>a.our_robots.size();<sp/>robot_idx++)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(a.our_robots[robot_idx]<sp/>==<sp/>b.our_robots[robot_idx]))<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>ball_state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.ball<sp/>==<sp/>b.ball;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">TEST(ROSMsgConversionNoop,<sp/><ref refid="structRobotState" kindref="compound">RobotState</ref>)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>test_lossless_convert_cpp_value(get_random_robot_state());</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal">TEST(ROSMsgConversionNoop,<sp/><ref refid="structBallState" kindref="compound">BallState</ref>)<sp/>{<sp/>test_lossless_convert_cpp_value(get_random_ball_state());<sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal">TEST(ROSMsgConversionNoop,<sp/><ref refid="structWorldState" kindref="compound">WorldState</ref>)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>test_lossless_convert_cpp_value(get_random_world_state());</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/pnayak/robocup-software/soccer/testing/soccer/src/world_state_test.cpp"/>
  </compounddef>
</doxygen>
