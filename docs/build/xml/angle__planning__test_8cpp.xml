<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="angle__planning__test_8cpp" kind="file" language="C++">
    <compoundname>angle_planning_test.cpp</compoundname>
    <includes local="no">fstream</includes>
    <includes local="no">gtest/gtest.h</includes>
    <includes refid="angle__planning_8hpp" local="yes">planning/primitives/angle_planning.hpp</includes>
    <incdepgraph>
      <node id="23">
        <label>QMap</label>
      </node>
      <node id="31">
        <label>planning/planning_params.hpp</label>
        <link refid="planning__params_8hpp_source"/>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>rj_constants/constants.hpp</label>
      </node>
      <node id="13">
        <label>rj_msgs/msg/linear_motion_instant.hpp</label>
      </node>
      <node id="35">
        <label>rj_msgs/msg/trajectory.hpp</label>
      </node>
      <node id="16">
        <label>rj_protos/LogFrame.pb.h</label>
      </node>
      <node id="30">
        <label>rotation_constraints.hpp</label>
        <link refid="rotation__constraints_8hpp_source"/>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>planning/primitives/angle_planning.hpp</label>
        <link refid="angle__planning_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>rj_param_utils/param.hpp</label>
      </node>
      <node id="21">
        <label>rj_geometry/shape_set.hpp</label>
      </node>
      <node id="17">
        <label>rj_geometry/arc.hpp</label>
      </node>
      <node id="34">
        <label>planning/trajectory.hpp</label>
        <link refid="trajectory_8hpp_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>string</label>
      </node>
      <node id="18">
        <label>rj_geometry/composite_shape.hpp</label>
      </node>
      <node id="2">
        <label>fstream</label>
      </node>
      <node id="1">
        <label>/home/pnayak/robocup-software/soccer/src/soccer/planning/tests/angle_planning_test.cpp</label>
        <link refid="angle__planning__test_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>rj_geometry/point.hpp</label>
      </node>
      <node id="10">
        <label>rj_geometry/geometry_conversions.hpp</label>
      </node>
      <node id="12">
        <label>rj_geometry/pose.hpp</label>
      </node>
      <node id="7">
        <label>planning/instant.hpp</label>
        <link refid="instant_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>planning/dynamic_obstacle.hpp</label>
        <link refid="dynamic__obstacle_8hpp_source"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>rj_geometry/polygon.hpp</label>
      </node>
      <node id="8">
        <label>optional</label>
      </node>
      <node id="26">
        <label>vector</label>
      </node>
      <node id="3">
        <label>gtest/gtest.h</label>
      </node>
      <node id="33">
        <label>motion_constraints.hpp</label>
        <link refid="motion__constraints_8hpp_source"/>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>rj_common/utils.hpp</label>
      </node>
      <node id="22">
        <label>QColor</label>
      </node>
      <node id="15">
        <label>debug_drawer.hpp</label>
        <link refid="debug__drawer_8hpp_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>rj_geometry/circle.hpp</label>
      </node>
      <node id="20">
        <label>rj_geometry/segment.hpp</label>
      </node>
      <node id="24">
        <label>memory</label>
      </node>
      <node id="29">
        <label>planning/robot_constraints.hpp</label>
        <link refid="robot__constraints_8hpp_source"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>rj_common/time.hpp</label>
      </node>
      <node id="14">
        <label>rj_msgs/msg/robot_instant.hpp</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="angle__planning__test_8cpp_1ac0df701f4411c2b98b3a7797aea9a83e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void check_angle_planning_near_exact</definition>
        <argsstring>(const Trajectory &amp;trajectory, const AngleFunction &amp;angle_function, double epsilon=1e-2)</argsstring>
        <name>check_angle_planning_near_exact</name>
        <param>
          <type>const <ref refid="classplanning_1_1Trajectory" kindref="compound">Trajectory</ref> &amp;</type>
          <declname>trajectory</declname>
        </param>
        <param>
          <type>const AngleFunction &amp;</type>
          <declname>angle_function</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
          <defval>1e-2</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/tests/angle_planning_test.cpp" line="12" column="6" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/tests/angle_planning_test.cpp" bodystart="12" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="angle__planning__test_8cpp_1a4d9aeb1cbc148954016731471be6feb0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classplanning_1_1Trajectory" kindref="compound">Trajectory</ref></type>
        <definition>static Trajectory make_straight_line_trajectory</definition>
        <argsstring>()</argsstring>
        <name>make_straight_line_trajectory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/tests/angle_planning_test.cpp" line="22" column="19" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/tests/angle_planning_test.cpp" bodystart="22" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="angle__planning__test_8cpp_1a21633a6bac6498c0f083f9a7ddc18a39" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structplanning_1_1RotationConstraints" kindref="compound">RotationConstraints</ref></type>
        <definition>static RotationConstraints make_rotation_constraints</definition>
        <argsstring>()</argsstring>
        <name>make_rotation_constraints</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/tests/angle_planning_test.cpp" line="35" column="28" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/tests/angle_planning_test.cpp" bodystart="35" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="angle__planning__test_8cpp_1a660c97b77873b88e86655a23462a18a9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structplanning_1_1RobotInstant" kindref="compound">RobotInstant</ref></type>
        <definition>static RobotInstant make_initial_instant</definition>
        <argsstring>(const LinearMotionInstant &amp;linear, const RJ::Time &amp;time, const AngleFunction &amp;angle_fn, double approx_angle=0.0)</argsstring>
        <name>make_initial_instant</name>
        <param>
          <type>const <ref refid="structplanning_1_1LinearMotionInstant" kindref="compound">LinearMotionInstant</ref> &amp;</type>
          <declname>linear</declname>
        </param>
        <param>
          <type>const RJ::Time &amp;</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const AngleFunction &amp;</type>
          <declname>angle_fn</declname>
        </param>
        <param>
          <type>double</type>
          <declname>approx_angle</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/tests/angle_planning_test.cpp" line="44" column="21" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/tests/angle_planning_test.cpp" bodystart="44" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="angle__planning__test_8cpp_1a0b1c96b2b1312179156c2addce72f6bf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void dump_trajectory</definition>
        <argsstring>(const std::string &amp;file_name, const Trajectory &amp;trajectory, const AngleFunction &amp;angle_fn)</argsstring>
        <name>dump_trajectory</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>file_name</declname>
        </param>
        <param>
          <type>const <ref refid="classplanning_1_1Trajectory" kindref="compound">Trajectory</ref> &amp;</type>
          <declname>trajectory</declname>
        </param>
        <param>
          <type>const AngleFunction &amp;</type>
          <declname>angle_fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/tests/angle_planning_test.cpp" line="54" column="14" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/tests/angle_planning_test.cpp" bodystart="54" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="angle__planning__test_8cpp_1a50833e4132a7dbd9971f41fd829dc720" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(AnglePlanning, obeys_angle_function_target)</argsstring>
        <name>TEST</name>
        <param>
          <type>AnglePlanning</type>
        </param>
        <param>
          <type>obeys_angle_function_target</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/tests/angle_planning_test.cpp" line="70" column="1" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/tests/angle_planning_test.cpp" bodystart="70" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="angle__planning__test_8cpp_1a1e44a0877adb8027fd6b6d1c1f31dbc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(AnglePlanning, DISABLED_start_from_incorrect_angle)</argsstring>
        <name>TEST</name>
        <param>
          <type>AnglePlanning</type>
        </param>
        <param>
          <type>DISABLED_start_from_incorrect_angle</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/tests/angle_planning_test.cpp" line="86" column="1" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/tests/angle_planning_test.cpp" bodystart="86" bodyend="107"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gtest/gtest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;planning/primitives/angle_planning.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">planning;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">rj_geometry;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(For<sp/>the<sp/>case<sp/>where<sp/>constraints<sp/>are<sp/>not<sp/>saturated)<sp/>check<sp/>that<sp/>we<sp/>follow<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>angle<sp/>function<sp/>nearly<sp/>exactly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_angle_planning_near_exact(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classplanning_1_1Trajectory" kindref="compound">Trajectory</ref>&amp;<sp/>trajectory,</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AngleFunction&amp;<sp/>angle_function,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon<sp/>=<sp/>1e-2)<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cursor<sp/>=<sp/>trajectory.<ref refid="classplanning_1_1Trajectory_1ad3e98d04150557e85d6cc10e14535174" kindref="member">cursor_begin</ref>();<sp/>cursor.<ref refid="classplanning_1_1Trajectory_1_1Cursor_1a6e4de2cd400d9f16baee3ff800071e17" kindref="member">has_value</ref>();</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cursor.advance(RJ::Seconds(0.01)))<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structplanning_1_1RobotInstant" kindref="compound">RobotInstant</ref><sp/>instant<sp/>=<sp/>cursor.value();</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_NEAR(instant.heading(),</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle_function(instant.linear_motion(),<sp/>instant.heading(),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">),<sp/>epsilon);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classplanning_1_1Trajectory" kindref="compound">Trajectory</ref><sp/>make_straight_line_trajectory()<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>constant-velocity<sp/>trajectory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classplanning_1_1Trajectory" kindref="compound">Trajectory</ref><sp/>trajectory;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>trajectory.<ref refid="classplanning_1_1Trajectory_1a1904daf08c7f566432dc2def4c24ec94" kindref="member">append_instant</ref>(<ref refid="structplanning_1_1RobotInstant" kindref="compound">RobotInstant</ref>{Pose(0,<sp/>0,<sp/>2),<sp/>Twist(1,<sp/>0,<sp/>0),<sp/>RJ::Time(0s)});</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>trajectory.<ref refid="classplanning_1_1Trajectory_1a1904daf08c7f566432dc2def4c24ec94" kindref="member">append_instant</ref>(<ref refid="structplanning_1_1RobotInstant" kindref="compound">RobotInstant</ref>{Pose(0.5,<sp/>0,<sp/>0),<sp/>Twist(1,<sp/>0,<sp/>0),<sp/>RJ::Time(500ms)});</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>trajectory.<ref refid="classplanning_1_1Trajectory_1a1904daf08c7f566432dc2def4c24ec94" kindref="member">append_instant</ref>(<ref refid="structplanning_1_1RobotInstant" kindref="compound">RobotInstant</ref>{Pose(1,<sp/>0,<sp/>0),<sp/>Twist(1,<sp/>0,<sp/>0),<sp/>RJ::Time(1000ms)});</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>trajectory.<ref refid="classplanning_1_1Trajectory_1a1904daf08c7f566432dc2def4c24ec94" kindref="member">append_instant</ref>(<ref refid="structplanning_1_1RobotInstant" kindref="compound">RobotInstant</ref>{Pose(1.5,<sp/>0,<sp/>0),<sp/>Twist(1,<sp/>0,<sp/>0),<sp/>RJ::Time(1500ms)});</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>trajectory.<ref refid="classplanning_1_1Trajectory_1a1904daf08c7f566432dc2def4c24ec94" kindref="member">append_instant</ref>(<ref refid="structplanning_1_1RobotInstant" kindref="compound">RobotInstant</ref>{Pose(2,<sp/>0,<sp/>0),<sp/>Twist(1,<sp/>0,<sp/>0),<sp/>RJ::Time(2000ms)});</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>trajectory.<ref refid="classplanning_1_1Trajectory_1a1904daf08c7f566432dc2def4c24ec94" kindref="member">append_instant</ref>(<ref refid="structplanning_1_1RobotInstant" kindref="compound">RobotInstant</ref>{Pose(2.5,<sp/>0,<sp/>0),<sp/>Twist(1,<sp/>0,<sp/>0),<sp/>RJ::Time(2500ms)});</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>trajectory.<ref refid="classplanning_1_1Trajectory_1a1904daf08c7f566432dc2def4c24ec94" kindref="member">append_instant</ref>(<ref refid="structplanning_1_1RobotInstant" kindref="compound">RobotInstant</ref>{Pose(3,<sp/>0,<sp/>0),<sp/>Twist(1,<sp/>0,<sp/>0),<sp/>RJ::Time(3000ms)});</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>trajectory;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structplanning_1_1RotationConstraints" kindref="compound">RotationConstraints</ref><sp/>make_rotation_constraints()<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structplanning_1_1RotationConstraints" kindref="compound">RotationConstraints</ref><sp/>constraints;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>constraints.max_accel<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>constraints.max_speed<sp/>=<sp/>3.0;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>constraints;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Make<sp/>a<sp/>RobotInstant<sp/>with<sp/>the<sp/>given<sp/>linear<sp/>motion<sp/>and<sp/>exactly<sp/>coinciding<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>correct<sp/>angle<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structplanning_1_1RobotInstant" kindref="compound">RobotInstant</ref><sp/>make_initial_instant(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structplanning_1_1LinearMotionInstant" kindref="compound">LinearMotionInstant</ref>&amp;<sp/>linear,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RJ::Time&amp;<sp/>time,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AngleFunction&amp;<sp/>angle_fn,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>approx_angle<sp/>=<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector2d<sp/>gradient;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angle<sp/>=<sp/>angle_fn(linear,<sp/>approx_angle,<sp/>&amp;gradient);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angular_velocity<sp/>=<sp/>gradient.dot(Eigen::Vector2d(linear.velocity));</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structplanning_1_1RobotInstant" kindref="compound">RobotInstant</ref>{Pose{linear.position,<sp/>angle},<sp/>Twist{linear.velocity,<sp/>angular_velocity},</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time};</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Dump<sp/>the<sp/>angle<sp/>trajectory<sp/>to<sp/>a<sp/>file.<sp/>For<sp/>debugging<sp/>purposes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">[[maybe_unused]]<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dump_trajectory(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>file_name,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classplanning_1_1Trajectory" kindref="compound">Trajectory</ref>&amp;<sp/>trajectory,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AngleFunction&amp;<sp/>angle_fn)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>out(file_name);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cursor<sp/>=<sp/>trajectory.<ref refid="classplanning_1_1Trajectory_1a1e525a2d89ef3d9d1f061245f2a27046" kindref="member">cursor</ref>(trajectory.<ref refid="classplanning_1_1Trajectory_1a2d86901d130909aaebbbda99284f67c5" kindref="member">begin_time</ref>());</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>cursor.has_value();<sp/>cursor.advance(0.01s))<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structplanning_1_1RobotInstant" kindref="compound">RobotInstant</ref><sp/>instant<sp/>=<sp/>cursor.value();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>target<sp/>=<sp/>angle_fn(instant.linear_motion(),<sp/>instant.heading(),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>RJ::Seconds(instant.stamp<sp/>-<sp/>trajectory.<ref refid="classplanning_1_1Trajectory_1a2d86901d130909aaebbbda99284f67c5" kindref="member">begin_time</ref>()).count()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>instant.heading()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>instant.angular_velocity()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>target</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal">TEST(AnglePlanning,<sp/>obeys_angle_function_target)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>trajectory<sp/>=<sp/>make_straight_line_trajectory();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>constraints<sp/>=<sp/>make_rotation_constraints();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>angle_fn<sp/>=<sp/>AngleFns::face_point(Point(2,<sp/>0.5));</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>robot<sp/>instant.<sp/>This<sp/>should<sp/>allow<sp/>us<sp/>to<sp/>have<sp/>perfect<sp/>tracking,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>we<sp/>will<sp/>start<sp/>perfectly<sp/>in<sp/>line<sp/>with<sp/>the<sp/>angle<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structplanning_1_1RobotInstant" kindref="compound">RobotInstant</ref><sp/>initial_instant<sp/>=<sp/>make_initial_instant(trajectory.<ref refid="classplanning_1_1Trajectory_1a148140986277de8ff415202756305720" kindref="member">first</ref>().linear_motion(),</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trajectory.<ref refid="classplanning_1_1Trajectory_1a148140986277de8ff415202756305720" kindref="member">first</ref>().stamp,<sp/>angle_fn);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>plan_angles(&amp;trajectory,<sp/>initial_instant,<sp/>angle_fn,<sp/>constraints);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>check_angle_planning_near_exact(trajectory,<sp/>angle_fn,<sp/>5e-2);</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal">TEST(AnglePlanning,<sp/>DISABLED_start_from_incorrect_angle)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>trajectory<sp/>=<sp/>make_straight_line_trajectory();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>constraints<sp/>=<sp/>make_rotation_constraints();</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>angle_fn<sp/>=<sp/>AngleFns::face_point(Point(2,<sp/>0.5));</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>time<sp/>we<sp/>will<sp/>use<sp/>a<sp/>robot<sp/>instant<sp/>with<sp/>zero<sp/>heading/angular<sp/>velocity,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>doesn&apos;t<sp/>match<sp/>up<sp/>with<sp/>the<sp/>profile.<sp/>This<sp/>means<sp/>that<sp/>we<sp/>need<sp/>to<sp/>catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structplanning_1_1RobotInstant" kindref="compound">RobotInstant</ref><sp/>initial_instant<sp/>=<sp/>trajectory.<ref refid="classplanning_1_1Trajectory_1a148140986277de8ff415202756305720" kindref="member">first</ref>();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>plan_angles(&amp;trajectory,<sp/>initial_instant,<sp/>angle_fn,<sp/>constraints);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>we<sp/>start<sp/>in<sp/>the<sp/>right<sp/>place.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(RobotInstant::nearly_equals(trajectory.<ref refid="classplanning_1_1Trajectory_1a148140986277de8ff415202756305720" kindref="member">first</ref>(),<sp/>initial_instant));</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>by<sp/>the<sp/>latter<sp/>half<sp/>of<sp/>the<sp/>trajectory,<sp/>we<sp/>are<sp/>close<sp/>to<sp/>correct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>check_angle_planning_near_exact(</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trajectory.<ref refid="classplanning_1_1Trajectory_1a96f2201ea5b6138ebc9043dd0367b32e" kindref="member">sub_trajectory</ref>(trajectory.<ref refid="classplanning_1_1Trajectory_1a2d86901d130909aaebbbda99284f67c5" kindref="member">begin_time</ref>()<sp/>+<sp/>RJ::Seconds(2.0),</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trajectory.<ref refid="classplanning_1_1Trajectory_1a68f04e57ac6b9f1c7f827c724ed63065" kindref="member">end_time</ref>()),</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle_fn,<sp/>5e-2);</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/tests/angle_planning_test.cpp"/>
  </compounddef>
</doxygen>
