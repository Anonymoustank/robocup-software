<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="battery__widget_8cpp" kind="file" language="C++">
    <compoundname>battery_widget.cpp</compoundname>
    <includes refid="battery__widget_8hpp" local="yes">battery_widget.hpp</includes>
    <includes local="no">cmath</includes>
    <incdepgraph>
      <node id="4">
        <label>cmath</label>
      </node>
      <node id="1">
        <label>/home/pnayak/robocup-software/soccer/src/soccer/ui/battery_widget.cpp</label>
        <link refid="battery__widget_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>QtWidgets</label>
      </node>
      <node id="2">
        <label>battery_widget.hpp</label>
        <link refid="battery__widget_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;battery_widget.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal">BatteryWidget::BatteryWidget(QWidget*<sp/>parent,<sp/>Qt::WindowFlags<sp/>f)<sp/>:<sp/>QWidget(parent,<sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/>_batteryLevel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>setBatteryLevel(0.5);</highlight></codeline>
<codeline lineno="8"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classBatteryWidget_1a00ba251b454f574fc067c6f741f72240" kindref="member">BatteryWidget::batteryLevel</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_batteryLevel;<sp/>}</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BatteryWidget::setBatteryLevel(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>batteryLevel)<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::fabs(batteryLevel<sp/>-<sp/>_batteryLevel)<sp/>&gt;<sp/>0.01)<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_batteryLevel<sp/>=<sp/>batteryLevel;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_batteryLevel<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_batteryLevel<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_batteryLevel<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_batteryLevel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>trigger<sp/>a<sp/>redraw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update();</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BatteryWidget::paintEvent(QPaintEvent*<sp/></highlight><highlight class="comment">/*event*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>QPainter<sp/>painter(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>painter.setRenderHint(QPainter::Antialiasing);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>QColor<sp/>color<sp/>=<sp/>_batteryLevel<sp/>&gt;<sp/>0.25<sp/>?<sp/>Qt::black<sp/>:<sp/>Qt::red;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>painter.setPen(QPen(color,<sp/>2.5));</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>minPadding<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>h2w<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>w<sp/>=<sp/>std::fmin(width()<sp/>-<sp/>minPadding<sp/>*<sp/>2,<sp/>(height()<sp/>-<sp/>minPadding<sp/>*<sp/>2)<sp/>*<sp/>h2w);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>h<sp/>=<sp/>w<sp/>/<sp/>h2w;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>QRectF<sp/>battBounds((width()<sp/>-<sp/>w)<sp/>/<sp/>2,<sp/>(height()<sp/>-<sp/>h)<sp/>/<sp/>2,<sp/>w,<sp/>h);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>how<sp/>big<sp/>the<sp/>positive<sp/>terminal<sp/>is<sp/>relative<sp/>to<sp/>the<sp/>main<sp/>part<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>battery</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>nubRatio<sp/>=<sp/>0.14;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>draw<sp/>main<sp/>part<sp/>of<sp/>battery</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>painter.setBrush(Qt::NoBrush);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>QRectF<sp/>mainBox<sp/>=<sp/>battBounds.adjusted(0,<sp/>0,<sp/>-battBounds.width()<sp/>*<sp/>nubRatio,<sp/>0);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>painter.drawRoundedRect(mainBox,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>painter.setBrush(color);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>nub<sp/>(positive<sp/>terminal<sp/>of<sp/>battery)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>QRectF<sp/>nubBox<sp/>=<sp/>battBounds.adjusted(battBounds.width()<sp/>*<sp/>(1<sp/>-<sp/>nubRatio),</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>battBounds.height()<sp/>/<sp/>4,<sp/>0,<sp/>-battBounds.height()<sp/>/<sp/>4);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>painter.drawRoundedRect(nubBox,<sp/>0.5,<sp/>0.5);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>12.5%,<sp/>37.5%,<sp/>62.5%,<sp/>87.5%<sp/>are<sp/>the<sp/>midpoints<sp/>of<sp/>the<sp/>4<sp/>bars</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>we<sp/>draw<sp/>the<sp/>number<sp/>of<sp/>bars<sp/>corresponding<sp/>to<sp/>the<sp/>point<sp/>that<sp/>this<sp/>battery</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>level<sp/>is<sp/>closest<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>barCount<sp/>=<sp/>ceil(_batteryLevel<sp/>*<sp/>4<sp/>-<sp/>0.24);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>draw<sp/>bars<sp/>to<sp/>show<sp/>battery<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>pad<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>barSpacing<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>barWidth<sp/>=<sp/>(mainBox.width()<sp/>-<sp/>pad<sp/>*<sp/>2<sp/>-<sp/>barSpacing<sp/>*<sp/>3)<sp/>/<sp/>4.0;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>painter.setPen(Qt::NoPen);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>barCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>painter.drawRect(QRectF(mainBox.left()<sp/>+<sp/>pad<sp/>+<sp/>(barSpacing<sp/>+<sp/>barWidth)<sp/>*<sp/>i,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mainBox.top()<sp/>+<sp/>pad,<sp/>barWidth,<sp/>mainBox.height()<sp/>-<sp/>pad<sp/>*<sp/>2));</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/pnayak/robocup-software/soccer/src/soccer/ui/battery_widget.cpp"/>
  </compounddef>
</doxygen>
