<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classplanning_1_1Trajectory" kind="class" language="C++" prot="public">
    <compoundname>planning::Trajectory</compoundname>
    <includes refid="trajectory_8hpp" local="no">trajectory.hpp</includes>
    <innerclass refid="classplanning_1_1Trajectory_1_1Cursor" prot="public">planning::Trajectory::Cursor</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classplanning_1_1Trajectory_1ab701d4cf704d6e9ab2c946084d25f0fa" prot="public" static="no">
        <type>rj_msgs::msg::Trajectory</type>
        <definition>using planning::Trajectory::Msg =  rj_msgs::msg::Trajectory</definition>
        <argsstring></argsstring>
        <name>Msg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="34" column="5" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classplanning_1_1Trajectory_1acceb9618090e92e046772eab7b159382" prot="private" static="no" mutable="no">
        <type>RobotInstantSequence</type>
        <definition>RobotInstantSequence planning::Trajectory::instants_</definition>
        <argsstring></argsstring>
        <name>instants_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="427" column="26" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" bodystart="427" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classplanning_1_1Trajectory_1a8b4093f54fb669e71e18a9db83a32ef8" prot="private" static="no" mutable="no">
        <type>std::optional&lt; RJ::Time &gt;</type>
        <definition>std::optional&lt;RJ::Time&gt; planning::Trajectory::creation_stamp_</definition>
        <argsstring></argsstring>
        <name>creation_stamp_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="431" column="19" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" bodystart="431" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classplanning_1_1Trajectory_1a776465621edc8a6b7b17cb6cd9925025" prot="private" static="no" mutable="no">
        <type>std::optional&lt; std::string &gt;</type>
        <definition>std::optional&lt;std::string&gt; planning::Trajectory::debug_text_</definition>
        <argsstring></argsstring>
        <name>debug_text_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="433" column="19" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" bodystart="433" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classplanning_1_1Trajectory_1ae56309d928e2b04ad2e3f7efba1cbc3d" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool planning::Trajectory::has_angle_profile_</definition>
        <argsstring></argsstring>
        <name>has_angle_profile_</name>
        <initializer>{false}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="436" column="10" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" bodystart="436" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classplanning_1_1Trajectory_1aa986546e699f8df0692fa3bc82a3d966" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>planning::Trajectory::Trajectory</definition>
        <argsstring>()=default</argsstring>
        <name>Trajectory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="36" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1a5e3010a745f223830499cca995e2e71c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>planning::Trajectory::~Trajectory</definition>
        <argsstring>()=default</argsstring>
        <name>~Trajectory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="37" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1a6f2acc93683b3db86290c57b73a2e6cd" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>planning::Trajectory::Trajectory</definition>
        <argsstring>(RobotInstantSequence instants)</argsstring>
        <name>Trajectory</name>
        <param>
          <type>RobotInstantSequence</type>
          <declname>instants</declname>
        </param>
        <briefdescription>
<para>Create a trajectory from several &quot;instants&quot;, each with a pose, velocity, and timestamp. This. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="43" column="14" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" bodystart="43" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1ab89533b9abf24ba866243d3a996a3932" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>planning::Trajectory::Trajectory</definition>
        <argsstring>(Trajectory a, const Trajectory &amp;b)</argsstring>
        <name>Trajectory</name>
        <param>
          <type><ref refid="classplanning_1_1Trajectory" kindref="compound">Trajectory</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classplanning_1_1Trajectory" kindref="compound">Trajectory</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Create a trajectory from two other trajectories. Assumes a.last() == b.first() so b.first() is skipped. </para>
        </briefdescription>
        <detaileddescription>
<para>Is able to move out of the first trajectory, but not the second. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="52" column="5" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.cpp" bodystart="14" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1a7da8594a4ab26c2d2974e8f5c7b28ab4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>planning::Trajectory::Trajectory</definition>
        <argsstring>(Trajectory &amp;&amp;other) noexcept=default</argsstring>
        <name>Trajectory</name>
        <param>
          <type><ref refid="classplanning_1_1Trajectory" kindref="compound">Trajectory</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allow copy constructor, copy assignment, move constructor, and move assignment </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="58" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1ae20ebabd96720bac593ee324610c500a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>planning::Trajectory::Trajectory</definition>
        <argsstring>(const Trajectory &amp;other)=default</argsstring>
        <name>Trajectory</name>
        <param>
          <type>const <ref refid="classplanning_1_1Trajectory" kindref="compound">Trajectory</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="59" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1a0f7a7a05e6f92f8d06358a4ce20a4bb5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classplanning_1_1Trajectory" kindref="compound">Trajectory</ref> &amp;</type>
        <definition>Trajectory&amp; planning::Trajectory::operator=</definition>
        <argsstring>(Trajectory &amp;&amp;other) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classplanning_1_1Trajectory" kindref="compound">Trajectory</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="60" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1a2a74f6cd9a61554e16bdce9fef82cf61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classplanning_1_1Trajectory" kindref="compound">Trajectory</ref> &amp;</type>
        <definition>Trajectory&amp; planning::Trajectory::operator=</definition>
        <argsstring>(const Trajectory &amp;other)=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classplanning_1_1Trajectory" kindref="compound">Trajectory</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="61" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1a1904daf08c7f566432dc2def4c24ec94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void planning::Trajectory::append_instant</definition>
        <argsstring>(RobotInstant instant)</argsstring>
        <name>append_instant</name>
        <param>
          <type><ref refid="structplanning_1_1RobotInstant" kindref="compound">RobotInstant</ref></type>
          <declname>instant</declname>
        </param>
        <briefdescription>
<para>Append a <ref refid="structplanning_1_1RobotInstant" kindref="compound">RobotInstant</ref>. instant.stamp must be greater than end() </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instant</parametername>
</parameternamelist>
<parameterdescription>
<para>The new <ref refid="structplanning_1_1RobotInstant" kindref="compound">RobotInstant</ref> to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="68" column="10" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.cpp" bodystart="37" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1a306fe22c35fd8c52706ab57e0a4abdc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void planning::Trajectory::hold_for</definition>
        <argsstring>(RJ::Seconds duration)</argsstring>
        <name>hold_for</name>
        <param>
          <type>RJ::Seconds</type>
          <declname>duration</declname>
        </param>
        <briefdescription>
<para>Hold the final position for a set time. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that this will not hold forever. That would be bad, because iterating over a trajectory would always hang.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seconds</parametername>
</parameternamelist>
<parameterdescription>
<para>the duration after the end of the trajectory to hold pose. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="78" column="10" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.cpp" bodystart="228" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1aed83fbf1cc9c16fc1f9b59e8ca2ba5b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool planning::Trajectory::check_time</definition>
        <argsstring>(RJ::Time time) const</argsstring>
        <name>check_time</name>
        <param>
          <type>RJ::Time</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Check that the given point in time is within bounds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="83" column="11" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.cpp" bodystart="52" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1a229c0d2f534bb5d6b765e388a8a4a879" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool planning::Trajectory::check_seconds</definition>
        <argsstring>(RJ::Seconds seconds) const</argsstring>
        <name>check_seconds</name>
        <param>
          <type>RJ::Seconds</type>
          <declname>seconds</declname>
        </param>
        <briefdescription>
<para>Check that the given time is within bounds. Operates on a duration (time into the path) rather than a timestamp. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="89" column="11" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.cpp" bodystart="56" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1a5d5a6c7272fb71d98d13fcb485c50325" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void planning::Trajectory::scale_duration</definition>
        <argsstring>(RJ::Seconds final_duration, RJ::Time fixed_point)</argsstring>
        <name>scale_duration</name>
        <param>
          <type>RJ::Seconds</type>
          <declname>final_duration</declname>
        </param>
        <param>
          <type>RJ::Time</type>
          <declname>fixed_point</declname>
        </param>
        <briefdescription>
<para>Contract or expand this trajectory by scaling velocities and timestamps (relative to the beginning). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>final_duration</parametername>
</parameternamelist>
<parameterdescription>
<para>The final duration of the trajectory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fixed_point</parametername>
</parameternamelist>
<parameterdescription>
<para>The time point that should remain unchanged. Defaults to the beginning of the trajectory. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="99" column="10" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.cpp" bodystart="67" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1a68ea563e81395887a55d18c32e3fe30e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void planning::Trajectory::scale_duration</definition>
        <argsstring>(RJ::Seconds final_duration)</argsstring>
        <name>scale_duration</name>
        <param>
          <type>RJ::Seconds</type>
          <declname>final_duration</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="104" column="10" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.cpp" bodystart="60" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1a2d86901d130909aaebbbda99284f67c5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>RJ::Time</type>
        <definition>RJ::Time planning::Trajectory::begin_time</definition>
        <argsstring>() const</argsstring>
        <name>begin_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The time point at the beginning of the trajectory. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="109" column="15" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" bodystart="109" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1a68f04e57ac6b9f1c7f827c724ed63065" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>RJ::Time</type>
        <definition>RJ::Time planning::Trajectory::end_time</definition>
        <argsstring>() const</argsstring>
        <name>end_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The time point at the end of the trajectory. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="120" column="15" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" bodystart="120" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1a54ddb10176574d9d074e0d94dfdbe736" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>RJ::Seconds</type>
        <definition>RJ::Seconds planning::Trajectory::duration</definition>
        <argsstring>() const</argsstring>
        <name>duration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The duration of the trajectory. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="131" column="18" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" bodystart="131" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1afddc56fe0b0ce5d21ad6f4433709b55f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; <ref refid="structplanning_1_1RobotInstant" kindref="compound">RobotInstant</ref> &gt;</type>
        <definition>std::optional&lt; RobotInstant &gt; planning::Trajectory::evaluate</definition>
        <argsstring>(RJ::Time time) const</argsstring>
        <name>evaluate</name>
        <param>
          <type>RJ::Time</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Evaluate this trajectory (calculate position and velocity) at a given point in time. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>When iterating over a trajectory, prefer the cursor interface.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>The time point to evaluate at (absolute time, not a duration into the path) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="structplanning_1_1RobotInstant" kindref="compound">RobotInstant</ref> at that point, or nullopt if time is out-of-bounds. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="146" column="20" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.cpp" bodystart="85" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1a9f804f0a90e3d3b1ab420cc89836e751" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; <ref refid="structplanning_1_1RobotInstant" kindref="compound">RobotInstant</ref> &gt;</type>
        <definition>std::optional&lt; RobotInstant &gt; planning::Trajectory::evaluate</definition>
        <argsstring>(RJ::Seconds seconds) const</argsstring>
        <name>evaluate</name>
        <param>
          <type>RJ::Seconds</type>
          <declname>seconds</declname>
        </param>
        <briefdescription>
<para>Evaluate this trajectory (calculate position and velocity) at a given duration past the beginning of the trajectory. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>When iterating over a trajectory, prefer the cursor interface.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seconds</parametername>
</parameternamelist>
<parameterdescription>
<para>The duration since the beginning of the path. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="structplanning_1_1RobotInstant" kindref="compound">RobotInstant</ref> at that duration into the path, or nullopt if seconds is out-of-bounds. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="158" column="20" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.cpp" bodystart="81" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1a96f2201ea5b6138ebc9043dd0367b32e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classplanning_1_1Trajectory" kindref="compound">Trajectory</ref></type>
        <definition>Trajectory planning::Trajectory::sub_trajectory</definition>
        <argsstring>(RJ::Time clip_start_time, RJ::Time clip_end_time) const</argsstring>
        <name>sub_trajectory</name>
        <param>
          <type>RJ::Time</type>
          <declname>clip_start_time</declname>
        </param>
        <param>
          <type>RJ::Time</type>
          <declname>clip_end_time</declname>
        </param>
        <briefdescription>
<para>Returns a trajectory formed using an interval subset of this trajectory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>clip_start_time</parametername>
</parameternamelist>
<parameterdescription>
<para>The time from which the sub-trajectory should start. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clip_end_time</parametername>
</parameternamelist>
<parameterdescription>
<para>The time at which the sub-trajectory should end. If it is after the trajectory&apos;s end, the sub-trajectory will be taken to the end of the trajectory.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a sub-trajectory of the original trajectory. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="172" column="17" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.cpp" bodystart="146" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1a5b89a3775d13c2a42dc71ddf980619c1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int planning::Trajectory::num_instants</definition>
        <argsstring>() const</argsstring>
        <name>num_instants</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the instant count. Intended for use when editing a trajectory in-place. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="179" column="10" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" bodystart="179" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1a06e44ccf6d7845d6d73b8d73e4815b93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structplanning_1_1RobotInstant" kindref="compound">RobotInstant</ref> &amp;</type>
        <definition>RobotInstant&amp; planning::Trajectory::instant_at</definition>
        <argsstring>(int i)</argsstring>
        <name>instant_at</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Get a reference to the ith instant. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the instant index to retrieve. Must be in range [0, <ref refid="classplanning_1_1Trajectory_1a5b89a3775d13c2a42dc71ddf980619c1" kindref="member">num_instants()</ref>) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a reference to the ith instant.</para>
</simplesect>
Intended for use when editing a trajectory in-place; for other cases it may be simpler to use the iterator or <ref refid="classplanning_1_1Trajectory_1_1Cursor" kindref="compound">Cursor</ref> interfaces. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="191" column="19" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" bodystart="191" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1a8b3c500c92576266565d0b944be1955d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structplanning_1_1RobotInstant" kindref="compound">RobotInstant</ref></type>
        <definition>RobotInstant planning::Trajectory::instant_at</definition>
        <argsstring>(int i) const</argsstring>
        <name>instant_at</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Get a reference to the ith instant. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the instant index to retrieve. Must be in range [0, <ref refid="classplanning_1_1Trajectory_1a5b89a3775d13c2a42dc71ddf980619c1" kindref="member">num_instants()</ref>) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a reference to the ith instant.</para>
</simplesect>
Intended for use when editing a trajectory in-place; for other cases it may be simpler to use the iterator or <ref refid="classplanning_1_1Trajectory_1_1Cursor" kindref="compound">Cursor</ref> interfaces. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="196" column="19" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" bodystart="196" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1a2cab811031d186c05bb837b2547f491d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto planning::Trajectory::instants_end</definition>
        <argsstring>()</argsstring>
        <name>instants_end</name>
        <briefdescription>
<para>Iterator interface. Should only be used for working with STL functions, not for iterating over trajectories. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="204" column="11" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" bodystart="204" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1a34aa862ae4a7ffaa24680d015d8601cf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto planning::Trajectory::instants_end</definition>
        <argsstring>() const</argsstring>
        <name>instants_end</name>
        <briefdescription>
<para>Iterator interface. Should only be used for working with STL functions, not for iterating over trajectories. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="208" column="11" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" bodystart="208" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1a5ed272f2a4130be40c302796560b590d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto planning::Trajectory::instants_begin</definition>
        <argsstring>()</argsstring>
        <name>instants_begin</name>
        <briefdescription>
<para>Iterator interface. Should only be used for working with STL functions, not for iterating over trajectories. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="212" column="11" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" bodystart="212" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1a38585354a6f5dcd7237ba8080e24ed50" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto planning::Trajectory::instants_begin</definition>
        <argsstring>() const</argsstring>
        <name>instants_begin</name>
        <briefdescription>
<para>Iterator interface. Should only be used for working with STL functions, not for iterating over trajectories. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="216" column="11" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" bodystart="216" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1a359153dce0c741208d85570c52e2b4a2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool planning::Trajectory::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <briefdescription>
<para>Check if this is an empty path. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="221" column="11" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" bodystart="221" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1a148140986277de8ff415202756305720" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structplanning_1_1RobotInstant" kindref="compound">RobotInstant</ref> &amp;</type>
        <definition>RobotInstant&amp; planning::Trajectory::first</definition>
        <argsstring>()</argsstring>
        <name>first</name>
        <briefdescription>
<para>Get the first instant in the past, or crash if the path is empty. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The first instant in the path. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="233" column="18" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" bodystart="233" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1a79e9a8a1d76c811d92e803303eb1e720" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structplanning_1_1RobotInstant" kindref="compound">RobotInstant</ref> &amp;</type>
        <definition>const RobotInstant&amp; planning::Trajectory::first</definition>
        <argsstring>() const</argsstring>
        <name>first</name>
        <briefdescription>
<para>Get the first instant in the past, or crash if the path is empty. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The first instant in the path. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="244" column="25" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" bodystart="244" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1a3dd24c057ec35affd3005f20b482c8a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structplanning_1_1RobotInstant" kindref="compound">RobotInstant</ref> &amp;</type>
        <definition>RobotInstant&amp; planning::Trajectory::last</definition>
        <argsstring>()</argsstring>
        <name>last</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the last instant in the past, or crash if the path is empty. <simplesect kind="return"><para>The last instant in the path. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="256" column="18" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" bodystart="256" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1a35804be88786e54b1b4f23083f045851" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structplanning_1_1RobotInstant" kindref="compound">RobotInstant</ref> &amp;</type>
        <definition>const RobotInstant&amp; planning::Trajectory::last</definition>
        <argsstring>() const</argsstring>
        <name>last</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="264" column="25" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" bodystart="264" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1a5ba601a1dac51a755badedb24cce23d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void planning::Trajectory::draw</definition>
        <argsstring>(DebugDrawer *drawer, std::optional&lt; rj_geometry::Point &gt; alt_text_position=std::nullopt) const</argsstring>
        <name>draw</name>
        <param>
          <type><ref refid="classDebugDrawer" kindref="compound">DebugDrawer</ref> *</type>
          <declname>drawer</declname>
        </param>
        <param>
          <type>std::optional&lt; rj_geometry::Point &gt;</type>
          <declname>alt_text_position</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draw this trajectory. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>drawer</parametername>
</parameternamelist>
<parameterdescription>
<para>The debug drawer to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alt_text_position</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional position at which to draw the text in the event that the trajectory is empty. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="278" column="10" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.cpp" bodystart="185" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1a1d5aa269c40c6b92f5c83b14b0709245" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void planning::Trajectory::set_debug_text</definition>
        <argsstring>(std::string str)</argsstring>
        <name>set_debug_text</name>
        <param>
          <type>std::string</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="293" column="10" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" bodystart="293" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1affc4c7642e4273489fc225f47f936d49" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string planning::Trajectory::get_debug_text</definition>
        <argsstring>() const</argsstring>
        <name>get_debug_text</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="294" column="18" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" bodystart="294" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1aa179ab8650198b456c33a52b2f59c759" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::optional&lt; RJ::Time &gt;</type>
        <definition>std::optional&lt;RJ::Time&gt; planning::Trajectory::time_created</definition>
        <argsstring>() const</argsstring>
        <name>time_created</name>
        <briefdescription>
<para>Get the time this trajectory was created, or nullopt if it has not yet been stamped. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="302" column="20" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" bodystart="302" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1a63a2f9b643b8854edeca12476f4b28bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void planning::Trajectory::stamp</definition>
        <argsstring>(RJ::Time time)</argsstring>
        <name>stamp</name>
        <param>
          <type>RJ::Time</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Stamp this trajectory for completion at the specified time. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="307" column="10" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" bodystart="307" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1a1e525a2d89ef3d9d1f061245f2a27046" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classplanning_1_1Trajectory_1_1Cursor" kindref="compound">Cursor</ref></type>
        <definition>Trajectory::Cursor planning::Trajectory::cursor</definition>
        <argsstring>(RJ::Time start_time) const</argsstring>
        <name>cursor</name>
        <param>
          <type>RJ::Time</type>
          <declname>start_time</declname>
        </param>
        <briefdescription>
<para>Get a <ref refid="classplanning_1_1Trajectory_1_1Cursor" kindref="compound">Cursor</ref> into this trajectory. Useful for iterating over it. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="399" column="13" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.cpp" bodystart="179" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1ad3e98d04150557e85d6cc10e14535174" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classplanning_1_1Trajectory_1_1Cursor" kindref="compound">Cursor</ref></type>
        <definition>Trajectory::Cursor planning::Trajectory::cursor_begin</definition>
        <argsstring>() const</argsstring>
        <name>cursor_begin</name>
        <briefdescription>
<para>Get a cursor to the beginning of the trajectory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="404" column="13" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.cpp" bodystart="183" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1a0e29fea4159824cbca07c73eb340d2ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void planning::Trajectory::mark_angles_valid</definition>
        <argsstring>()</argsstring>
        <name>mark_angles_valid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Mark this trajectory as having a valid angle profile.</para>
<para>This will be reset upon the following conditions:<itemizedlist>
<listitem><para>New instants are appended</para>
</listitem><listitem><para>The trajectory is concatenated with another trajectory. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="413" column="10" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" bodystart="413" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1ae9c957e3425f53aff34ed669ddeb5b54" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool planning::Trajectory::angles_valid</definition>
        <argsstring>() const</argsstring>
        <name>angles_valid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True when this trajectory is properly angle profiled. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="418" column="11" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" bodystart="418" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1a76fabf3aa475f2e7e52ac2c7c9f3d3ce" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const RobotInstantSequence &amp;</type>
        <definition>const RobotInstantSequence&amp; planning::Trajectory::instants</definition>
        <argsstring>() const</argsstring>
        <name>instants</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The robot instants forming the keypoints of this trajectory, sequenced by time. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="423" column="33" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" bodystart="423" bodyend="423"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classplanning_1_1Trajectory_1acba6880797e3d9f3d8a82fd9045767f0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool planning::Trajectory::nearly_equal</definition>
        <argsstring>(const Trajectory &amp;a, const Trajectory &amp;b, double tolerance=1e-6)</argsstring>
        <name>nearly_equal</name>
        <param>
          <type>const <ref refid="classplanning_1_1Trajectory" kindref="compound">Trajectory</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classplanning_1_1Trajectory" kindref="compound">Trajectory</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
          <defval>1e-6</defval>
        </param>
        <briefdescription>
<para>Check whether all poses in two trajectories are nearly equal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="226" column="17" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.cpp" bodystart="215" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="classplanning_1_1Trajectory_1aaf9a8824c408e945122b37b031aa4ff8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structplanning_1_1RobotInstant" kindref="compound">RobotInstant</ref></type>
        <definition>RobotInstant planning::Trajectory::interpolated_instant</definition>
        <argsstring>(const RobotInstant &amp;prev, const RobotInstant &amp;next, RJ::Time time)</argsstring>
        <name>interpolated_instant</name>
        <param>
          <type>const <ref refid="structplanning_1_1RobotInstant" kindref="compound">RobotInstant</ref> &amp;</type>
          <declname>prev</declname>
        </param>
        <param>
          <type>const <ref refid="structplanning_1_1RobotInstant" kindref="compound">RobotInstant</ref> &amp;</type>
          <declname>next</declname>
        </param>
        <param>
          <type>RJ::Time</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interpolate between two robot instants <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prev</parametername>
</parameternamelist>
<parameterdescription>
<para>previous robot instant </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>next</parametername>
</parameternamelist>
<parameterdescription>
<para>next robot instant </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>time between previous and next </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the interpolated robot instant at the given time </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="289" column="25" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.cpp" bodystart="95" bodyend="144"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a trajectory x(t), y(t), h(t), with a smooth velocity and piecewise-continuous acceleration. </para>
    </briefdescription>
    <detaileddescription>
<para>Note that this provides two interfaces: one accepting RJ::Seconds, which is a duration, and one accepting RJ::Time, an instant in time.</para>
<para>This uses cubic interpolation between two adjacent instants, fitting a parametric cubic polynomial based on initial and final posiiton and velocity.</para>
<para>A trajectory also carries a timestamp representing the time at which it was planned. This should be filled in using <computeroutput>trajectory.stamp(RJ::Time)</computeroutput> before publishing, and will be reset to <computeroutput>nullopt</computeroutput> when the trajectory is modified. </para>
    </detaileddescription>
    <location file="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" line="32" column="17" bodyfile="/home/pnayak/robocup-software/soccer/src/soccer/planning/trajectory.hpp" bodystart="32" bodyend="437"/>
    <listofallmembers>
      <member refid="classplanning_1_1Trajectory_1ae9c957e3425f53aff34ed669ddeb5b54" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>angles_valid</name></member>
      <member refid="classplanning_1_1Trajectory_1a1904daf08c7f566432dc2def4c24ec94" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>append_instant</name></member>
      <member refid="classplanning_1_1Trajectory_1a2d86901d130909aaebbbda99284f67c5" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>begin_time</name></member>
      <member refid="classplanning_1_1Trajectory_1a229c0d2f534bb5d6b765e388a8a4a879" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>check_seconds</name></member>
      <member refid="classplanning_1_1Trajectory_1aed83fbf1cc9c16fc1f9b59e8ca2ba5b6" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>check_time</name></member>
      <member refid="classplanning_1_1Trajectory_1a8b4093f54fb669e71e18a9db83a32ef8" prot="private" virt="non-virtual"><scope>planning::Trajectory</scope><name>creation_stamp_</name></member>
      <member refid="classplanning_1_1Trajectory_1a1e525a2d89ef3d9d1f061245f2a27046" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>cursor</name></member>
      <member refid="classplanning_1_1Trajectory_1ad3e98d04150557e85d6cc10e14535174" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>cursor_begin</name></member>
      <member refid="classplanning_1_1Trajectory_1a776465621edc8a6b7b17cb6cd9925025" prot="private" virt="non-virtual"><scope>planning::Trajectory</scope><name>debug_text_</name></member>
      <member refid="classplanning_1_1Trajectory_1a5ba601a1dac51a755badedb24cce23d3" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>draw</name></member>
      <member refid="classplanning_1_1Trajectory_1a54ddb10176574d9d074e0d94dfdbe736" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>duration</name></member>
      <member refid="classplanning_1_1Trajectory_1a359153dce0c741208d85570c52e2b4a2" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>empty</name></member>
      <member refid="classplanning_1_1Trajectory_1a68f04e57ac6b9f1c7f827c724ed63065" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>end_time</name></member>
      <member refid="classplanning_1_1Trajectory_1afddc56fe0b0ce5d21ad6f4433709b55f" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>evaluate</name></member>
      <member refid="classplanning_1_1Trajectory_1a9f804f0a90e3d3b1ab420cc89836e751" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>evaluate</name></member>
      <member refid="classplanning_1_1Trajectory_1a148140986277de8ff415202756305720" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>first</name></member>
      <member refid="classplanning_1_1Trajectory_1a79e9a8a1d76c811d92e803303eb1e720" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>first</name></member>
      <member refid="classplanning_1_1Trajectory_1affc4c7642e4273489fc225f47f936d49" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>get_debug_text</name></member>
      <member refid="classplanning_1_1Trajectory_1ae56309d928e2b04ad2e3f7efba1cbc3d" prot="private" virt="non-virtual"><scope>planning::Trajectory</scope><name>has_angle_profile_</name></member>
      <member refid="classplanning_1_1Trajectory_1a306fe22c35fd8c52706ab57e0a4abdc9" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>hold_for</name></member>
      <member refid="classplanning_1_1Trajectory_1a06e44ccf6d7845d6d73b8d73e4815b93" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>instant_at</name></member>
      <member refid="classplanning_1_1Trajectory_1a8b3c500c92576266565d0b944be1955d" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>instant_at</name></member>
      <member refid="classplanning_1_1Trajectory_1a76fabf3aa475f2e7e52ac2c7c9f3d3ce" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>instants</name></member>
      <member refid="classplanning_1_1Trajectory_1acceb9618090e92e046772eab7b159382" prot="private" virt="non-virtual"><scope>planning::Trajectory</scope><name>instants_</name></member>
      <member refid="classplanning_1_1Trajectory_1a5ed272f2a4130be40c302796560b590d" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>instants_begin</name></member>
      <member refid="classplanning_1_1Trajectory_1a38585354a6f5dcd7237ba8080e24ed50" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>instants_begin</name></member>
      <member refid="classplanning_1_1Trajectory_1a2cab811031d186c05bb837b2547f491d" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>instants_end</name></member>
      <member refid="classplanning_1_1Trajectory_1a34aa862ae4a7ffaa24680d015d8601cf" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>instants_end</name></member>
      <member refid="classplanning_1_1Trajectory_1aaf9a8824c408e945122b37b031aa4ff8" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>interpolated_instant</name></member>
      <member refid="classplanning_1_1Trajectory_1a3dd24c057ec35affd3005f20b482c8a0" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>last</name></member>
      <member refid="classplanning_1_1Trajectory_1a35804be88786e54b1b4f23083f045851" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>last</name></member>
      <member refid="classplanning_1_1Trajectory_1a0e29fea4159824cbca07c73eb340d2ce" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>mark_angles_valid</name></member>
      <member refid="classplanning_1_1Trajectory_1ab701d4cf704d6e9ab2c946084d25f0fa" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>Msg</name></member>
      <member refid="classplanning_1_1Trajectory_1acba6880797e3d9f3d8a82fd9045767f0" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>nearly_equal</name></member>
      <member refid="classplanning_1_1Trajectory_1a5b89a3775d13c2a42dc71ddf980619c1" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>num_instants</name></member>
      <member refid="classplanning_1_1Trajectory_1a0f7a7a05e6f92f8d06358a4ce20a4bb5" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>operator=</name></member>
      <member refid="classplanning_1_1Trajectory_1a2a74f6cd9a61554e16bdce9fef82cf61" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>operator=</name></member>
      <member refid="classplanning_1_1Trajectory_1a5d5a6c7272fb71d98d13fcb485c50325" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>scale_duration</name></member>
      <member refid="classplanning_1_1Trajectory_1a68ea563e81395887a55d18c32e3fe30e" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>scale_duration</name></member>
      <member refid="classplanning_1_1Trajectory_1a1d5aa269c40c6b92f5c83b14b0709245" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>set_debug_text</name></member>
      <member refid="classplanning_1_1Trajectory_1a63a2f9b643b8854edeca12476f4b28bc" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>stamp</name></member>
      <member refid="classplanning_1_1Trajectory_1a96f2201ea5b6138ebc9043dd0367b32e" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>sub_trajectory</name></member>
      <member refid="classplanning_1_1Trajectory_1aa179ab8650198b456c33a52b2f59c759" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>time_created</name></member>
      <member refid="classplanning_1_1Trajectory_1aa986546e699f8df0692fa3bc82a3d966" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>Trajectory</name></member>
      <member refid="classplanning_1_1Trajectory_1a6f2acc93683b3db86290c57b73a2e6cd" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>Trajectory</name></member>
      <member refid="classplanning_1_1Trajectory_1ab89533b9abf24ba866243d3a996a3932" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>Trajectory</name></member>
      <member refid="classplanning_1_1Trajectory_1a7da8594a4ab26c2d2974e8f5c7b28ab4" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>Trajectory</name></member>
      <member refid="classplanning_1_1Trajectory_1ae20ebabd96720bac593ee324610c500a" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>Trajectory</name></member>
      <member refid="classplanning_1_1Trajectory_1a5e3010a745f223830499cca995e2e71c" prot="public" virt="non-virtual"><scope>planning::Trajectory</scope><name>~Trajectory</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
