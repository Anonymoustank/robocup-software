:py:mod:`rj_gameplay.tactic.striker_tactic`
===========================================

.. py:module:: rj_gameplay.tactic.striker_tactic


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   rj_gameplay.tactic.striker_tactic.StrikerTactic
   rj_gameplay.tactic.striker_tactic.LineKickStrikerTactic




.. py:class:: StrikerTactic(world_state: stp.rc.WorldState)

   Bases: :py:obj:`stp.tactic.Tactic`

   Captures ball and shoots. This Tactic merely holds the StrikerRole and handles its assignment for the Play level.

   .. py:method:: tick(self, world_state: stp.rc.WorldState) -> List[Tuple[int, rj_msgs.msg.RobotIntent]]


   .. py:method:: is_done(self, world_state: stp.rc.WorldState) -> bool


   .. py:method:: init_roles(self, world_state: stp.rc.WorldState)


   .. py:method:: needs_assign(self)
      :property:



.. py:class:: LineKickStrikerTactic(target_point: numpy.ndarray, cost: stp.role.CostFn = None)

   Bases: :py:obj:`stp.tactic.ITactic`

   A striker tactic which receives then shoots the ball

   .. py:method:: compute_props(self)


   .. py:method:: create_request(self, **kwargs) -> stp.role.RoleRequest

      Creates a sane default RoleRequest.
      :return: A list of size 1 of a sane default RoleRequest.


   .. py:method:: get_requests(self, world_state: stp.rc.WorldState, props) -> List[stp.tactic.RoleRequests]


   .. py:method:: tick(self, world_state: stp.rc.WorldState, role_results: stp.tactic.RoleResults) -> List[stp.tactic.SkillEntry]

      :return: list of skills


   .. py:method:: is_done(self, world_state) -> bool



