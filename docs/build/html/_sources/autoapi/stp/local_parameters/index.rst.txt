:py:mod:`stp.local_parameters`
==============================

.. py:module:: stp.local_parameters

.. autoapi-nested-parse::

   Usage: in the global scope of a module, at initialization time, construct a Param.
   ```python
   from stp.local_parameters import Param
   my_parameter = Param("my_param_name", 1.0, Param.PARAMETER_DOUBLE)
   ```
   Call `register_parameters` in gameplay init. Then, use the parameters:
   ```
   do_something(my_parameter.value)
   ```



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   stp.local_parameters.Param



Functions
~~~~~~~~~

.. autoapisummary::

   stp.local_parameters.update_params
   stp.local_parameters.register_parameters
   stp.local_parameters.register_parameter



Attributes
~~~~~~~~~~

.. autoapisummary::

   stp.local_parameters.parameters
   stp.local_parameters.param_node


.. py:data:: parameters
   

   

.. py:data:: param_node
   :annotation: :Optional[rclpy.node.Node]

   

.. py:class:: Param(name: str, default_value, param_type: rcl_interfaces.msg.ParameterType = None, description: str = '')

   .. py:attribute:: PARAMETER_NOT_SET
      

      

   .. py:attribute:: PARAMETER_BOOL
      

      

   .. py:attribute:: PARAMETER_INTEGER
      

      

   .. py:attribute:: PARAMETER_DOUBLE
      

      

   .. py:attribute:: PARAMETER_BYTE_ARRAY
      

      

   .. py:attribute:: PARAMETER_BOOL_ARRAY
      

      

   .. py:attribute:: PARAMETER_INTEGER_ARRAY
      

      

   .. py:attribute:: PARAMETER_DOUBLE_ARRAY
      

      

   .. py:method:: value(self)
      :property:



.. py:function:: update_params(params: List[rclpy.parameter.Parameter]) -> rcl_interfaces.msg.SetParametersResult

   Update a set of parameters with new values.
   :param params: A list of ROS Parameter changes


.. py:function:: register_parameters(node: rclpy.node.Node)

   Register all parameters. This should be called after module initialization.

   :param node: The gameplay node


.. py:function:: register_parameter(node: rclpy.node.Node, param_name: str, value, param_type: rcl_interfaces.msg.ParameterType, description: Optional[str])


