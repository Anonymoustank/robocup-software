:py:mod:`stp.utils.world_state_converter`
=========================================

.. py:module:: stp.utils.world_state_converter


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   stp.utils.world_state_converter.RobotStatus
   stp.utils.world_state_converter.RobotState
   stp.utils.world_state_converter.PartialWorldState



Functions
~~~~~~~~~

.. autoapisummary::

   stp.utils.world_state_converter.robotstate_to_partial_robot
   stp.utils.world_state_converter.robotstatus_to_partial_robot
   stp.utils.world_state_converter.ballstate_to_ball
   stp.utils.world_state_converter.build_game_info
   stp.utils.world_state_converter.field_msg_to_field
   stp.utils.world_state_converter.worldstate_message_converter
   stp.utils.world_state_converter.robot_creator
   stp.utils.world_state_converter.worldstate_creator



Attributes
~~~~~~~~~~

.. autoapisummary::

   stp.utils.world_state_converter.RobotId


.. py:data:: RobotId
   

   

.. py:class:: RobotStatus(robot_id: RobotId = None, has_ball_sense: bool = None, kicker_charged: bool = None, kicker_healthy: bool = None, lethal_fault: bool = None)

   A class to contain the information from the robot status messsage

   .. py:attribute:: __slots
      :annotation: = ['robot_id', 'has_ball_sense', 'kicker_charged', 'kicker_healthy', 'lethal_fault']

      

   .. py:attribute:: robot_id
      :annotation: :RobotId

      visible: bool
      has_ball_sense: bool
      kicker_charged: bool
      kicker_healthy: bool
      lethal_fault: bool



.. py:class:: RobotState(id: RobotId, pose: numpy.ndarray, twist: numpy.ndarray, visible: bool)

   A class to contain the infomration from the robot state message

   .. py:attribute:: __slots
      :annotation: = ['id', 'pose', 'twist', 'visible']

      

   .. py:attribute:: id
      :annotation: :RobotId

      

   .. py:attribute:: pose
      :annotation: :numpy.ndarray

      

   .. py:attribute:: twist
      :annotation: :numpy.ndarray

      

   .. py:attribute:: visible
      :annotation: :bool

      


.. py:class:: PartialWorldState(our_robots: List[RobotState], their_robots: List[RobotState], ball: stp.rc.Ball)

   A class that contains all the ball, and robot states

   .. py:attribute:: __slots
      :annotation: = ['our_robots', 'their_robots', 'ball']

      

   .. py:attribute:: our_robots
      :annotation: :List[RobotState]

      

   .. py:attribute:: their_robots
      :annotation: :List[RobotState]

      

   .. py:attribute:: ball
      :annotation: :stp.rc.Ball

      


.. py:function:: robotstate_to_partial_robot(robot_msg: rj_msgs.msg.RobotState, index: int) -> RobotState

   :return: robot state class representing the state of the robot, partially representing the larger Robot class.


.. py:function:: robotstatus_to_partial_robot(robot_msg: rj_msgs.msg.RobotStatus) -> RobotStatus

   :return: robot status class representing the status of the robot, partially representing the larger Robot class.


.. py:function:: ballstate_to_ball(ball_msg: rj_msgs.msg.BallState) -> stp.rc.Ball

   :return: ball class representing the state of the ball.


.. py:function:: build_game_info(play_state_msg: rj_msgs.msg.PlayState, match_state_msg: rj_msgs.msg.MatchState) -> stp.rc.GameInfo

   :return: GameInfo class from rc.py


.. py:function:: field_msg_to_field(field_msg: rj_msgs.msg.FieldDimensions) -> stp.rc.Field

   :return: Field class from rc.py


.. py:function:: worldstate_message_converter(msg: worldstate_message_converter.msg) -> PartialWorldState

   :return: partial world state class representing the state of the robots and ball.


.. py:function:: robot_creator(robot_state: RobotState, robot_status: RobotStatus = None) -> stp.rc.Robot

   A function which combines the robot state and robot status to create a rc.Robot class
       :return: Robot class from rc.Robot representing the status and state of the robot


.. py:function:: worldstate_creator(partial_world_state: PartialWorldState, robot_statuses: List[RobotStatus], game_info: stp.rc.GameInfo, field: stp.rc.Field, goalie_id: int) -> stp.rc.WorldState

   A function which combines the partial world state, robot statuses, game info, and field to create a whole world state
       :return: a world state as a rc.WorldState object


