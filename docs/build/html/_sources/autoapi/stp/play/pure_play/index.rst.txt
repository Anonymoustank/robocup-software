:py:mod:`stp.play.pure_play`
============================

.. py:module:: stp.play.pure_play

.. autoapi-nested-parse::

   This module contains PurePlay.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   stp.play.pure_play.PurePlay




.. py:class:: PurePlay(tactics: stp.play.TacticsEnum, ctx: stp.play.Ctx)

   Bases: :py:obj:`stp.play.IPlay`\ [\ :py:obj:`PurePlay.Prop`\ ], :py:obj:`abc.ABC`

   A stateless play that uses the same tactics for the entire lifetime.

   .. py:class:: Prop

      .. py:attribute:: tactic_props
         :annotation: :Dict[Type[stp.tactic.ITactic], Any]

         


   .. py:attribute:: __slots__
      :annotation: = ['_role_assignment', 'tactics']

      

   .. py:attribute:: _role_assignment
      :annotation: :stp.role.assignment.IRoleAssignment

      

   .. py:attribute:: tactic
      :annotation: :stp.play.TacticsEnum

      

   .. py:method:: compute_props(self, prev_props: Optional[Prop]) -> Prop


   .. py:method:: tick(self, world_state: stp.rc.WorldState, prev_results: stp.role.assignment.FlatRoleResults, props: Prop) -> Tuple[stp.role.assignment.FlatRoleResults, List[stp.action.IAction]]

      Performs one "tick" of the specified play.

      This should:
          1. Collect all the role requests from the tactics
          2. Perform role assignment
          3. Gives each tactic its assigned roles and getting a list of skills.
          4. Return the list of skills obtained.
      :param world_state: The current state of the world.
      :param prev_results: The previous results of role assignment.
      :param props: Props from compute_props. This should be "const", as all
      mutations should happen in compute_props.
      :return: The list of skill to run.


   .. py:method:: collect_role_requests(self, world_state: stp.rc.WorldState) -> stp.play.RoleRequests

      Collects the role requests from each tactic.
      :param world_state: The current WorldState.
      :return: The collected play.RoleRequests.


   .. py:method:: get_actions_from_tactics(self, flat_results: stp.role.assignment.FlatRoleResults, prop: Prop) -> List[stp.action.IAction]

      Passes the roles assigned from role assignment to the correct tactic.
      :param flat_results: The results of role assignment.
      :param prop: The props of the play. This should be "const".
      :return: The list of skills for each tactic.



