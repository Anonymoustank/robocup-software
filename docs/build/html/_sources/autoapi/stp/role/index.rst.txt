:py:mod:`stp.role`
==================

.. py:module:: stp.role


Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   assignment/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   constraint/index.rst
   cost/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   stp.role.Role
   stp.role.Priority
   stp.role.CostFn
   stp.role.ConstraintFn
   stp.role.RoleRequest
   stp.role.RoleResult



Functions
~~~~~~~~~

.. autoapisummary::

   stp.role.unconstrained_constraint_fn



Attributes
~~~~~~~~~~

.. autoapisummary::

   stp.role.BIG_STUPID_NUMBER_CONST_FOR_UNASSIGNED_COST_PLS_CHANGE


.. py:data:: BIG_STUPID_NUMBER_CONST_FOR_UNASSIGNED_COST_PLS_CHANGE
   :annotation: = 9999

   

.. py:class:: Role(robot: stp.rc.Robot)

   Bases: :py:obj:`abc.ABC`

   Complex single-robot role, such as Goalie or Striker. Uses Skills to achieve behavior.

   .. py:method:: tick(self, world_state: stp.rc.WorldState) -> rj_msgs.msg.RobotIntent
      :abstractmethod:

      Handle behavior of Role by handling which Skill is ticked, and with what params. Return the RobotIntent returned from ticking a Skill.


   .. py:method:: is_done(self, world_state: stp.rc.WorldState) -> bool
      :abstractmethod:

      True if Role is done; False otherwise.


   .. py:method:: robot(self) -> stp.rc.Robot
      :property:

      Returns self._robot. @property allows the getter to be called like this:

      some_role = ConcreteRole()
      some_robot = some_role.robot



.. py:class:: Priority

   Bases: :py:obj:`enum.IntEnum`

   An enum to represent priority of the role assignment.

   .. py:attribute:: LOW
      :annotation: = 0

      

   .. py:attribute:: MEDIUM
      :annotation: = 1

      

   .. py:attribute:: HIGH
      :annotation: = 2

      

   .. py:attribute:: NUM_PRIORITIES
      :annotation: = 3

      


.. py:class:: CostFn

   Bases: :py:obj:`Protocol`

   Protocol for CostFn.

   .. py:method:: __call__(self, robot: stp.rc.Robot, world_state: stp.rc.WorldState) -> float

      Given a robot and the current world state, returns the cost of assigning that robot to a given role.
      :param robot: The current robot to check costs for.
      :param world_state: The current world state.
      :return:


   .. py:method:: unassigned_cost_fn(self, prev_results: Optional[RoleResult], world_state: stp.rc.WorldState) -> float

      Given the previous role assigment and current world state,
      returns the cost of not assigning any robot.
      :param prev_result: The previous role assignment result.
      :param world_state: The current world state.
      :return: cost of not assigning



.. py:class:: ConstraintFn

   Bases: :py:obj:`Protocol`

   Protocol for ConstraintFn.

   .. py:method:: __call__(self, robot: stp.rc.Robot, prev_result: Optional[RoleResult], world_state: stp.rc.WorldState) -> bool

      Given a robot, the previous role assignment result, and the current world
      state, returns true if the assignment is valid.
      :param robot: The current robot to check costs for.
      :param prev_result: The previous role assignment result.
      :param world_state: The current world state.
      :return: True if the assignment is valid, false otherwise.



.. py:function:: unconstrained_constraint_fn(robot: stp.rc.Robot, prev_result: Optional[RoleResult], world_state: stp.rc.WorldState) -> bool

   An unconstrained constraint fn, ie it always returns True.
   :param robot: The current robot to check costs for.
   :param prev_result: The previous role assignment result.
   :param world_state: The current world state.
   :return: True.


.. py:class:: RoleRequest(priority: Priority, required: bool, cost_fn: CostFn, constraint_fn: ConstraintFn = unconstrained_constraint_fn)

   Role Request.

   .. py:attribute:: __slots__
      :annotation: = ['priority', 'required', 'cost_fn', 'constraint_fn']

      

   .. py:attribute:: priority
      :annotation: :Priority

      

   .. py:attribute:: required
      :annotation: :bool

      

   .. py:attribute:: cost_fn
      :annotation: :CostFn

      

   .. py:attribute:: constraint_fn
      :annotation: :ConstraintFn

      

   .. py:method:: with_priority(self, priority: Priority) -> RoleRequest

      Builder style method that modifies the priority and returns the current
      instance.
      :param priority: The priority to set the RoleRequest to.
      :return: self.


   .. py:method:: with_required(self, required: bool) -> RoleRequest

      Builder style method that modifies required and returns the current
      instance.
      :param required: Whether the tactic will fail if this RoleRequest is not
      fulfilled.
      :return: self.


   .. py:method:: with_cost_fn(self, cost_fn: CostFn) -> RoleRequest

      Builder style method that modifies the cost function and returns the current
      instance.
      :param cost_fn: The new cost function to use.
      :return: self.


   .. py:method:: with_constraint_fn(self, constraint_fn: ConstraintFn) -> RoleRequest

      Builder style method that modifies the cost function and returns the current
      instance.
      :param constraint_fn: The new constraint function to use.
      :return: self.


   .. py:method:: __str__(self) -> str

      Return str(self).


   .. py:method:: __repr__(self) -> str

      Return repr(self).



.. py:class:: RoleResult(request: RoleRequest, cost: float, role: Role)

   The result of role assignment.

   .. py:attribute:: __slots__
      :annotation: = ['request', 'cost', 'role']

      

   .. py:attribute:: request
      :annotation: :RoleRequest

      

   .. py:attribute:: cost
      :annotation: :float

      

   .. py:attribute:: role
      :annotation: :Role

      

   .. py:method:: is_filled(self) -> bool

      Returns true if the role request is filled.
      :return: True if the role request is filled.


   .. py:method:: assign(self, robot: stp.rc.Robot, cost: float) -> None

      Assigns self.role to the passed in robot, updating self.cost to the
      assignment cost.
      :param robot: Robot to use for the role.
      :param cost: The cost of the assignment.


   .. py:method:: from_request(cls, request: RoleRequest) -> RoleResult
      :classmethod:

      Creates an unfilled RoleResult from a RoleRequest.


   .. py:method:: __str__(self) -> str

      Return str(self).


   .. py:method:: __repr__(self) -> str

      Return repr(self).



