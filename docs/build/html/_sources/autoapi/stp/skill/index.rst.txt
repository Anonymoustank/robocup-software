:py:mod:`stp.skill`
===================

.. py:module:: stp.skill

.. autoapi-nested-parse::

   This module contains data structures for the Skills level of STP.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   action_behavior/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   stp.skill.ISkill
   stp.skill.Skill




.. py:class:: ISkill

   Bases: :py:obj:`abc.ABC`

   Helper class that provides a standard way to create an ABC using
   inheritance.


.. py:class:: Skill

   Bases: :py:obj:`abc.ABC`

   Atomic single-robot behavior, such as Move or PivotKick. Created and ticked by Tactics. Uses Actions to get RobotIntents.

   .. py:method:: tick(self, world_state: stp.rc.WorldState) -> rj_msgs.msg.RobotIntent

      Logic for Skill goes here. RobotIntents obtained via Actions.

      robot state is updated through super call to this method (i.e. super().tick(world_state))

      .msg
              :param world_state: Current world state.
              :return: A single RobotIntent.


   .. py:method:: is_done(self, world_state: stp.rc.WorldState) -> bool
      :abstractmethod:

      True when skill is done; False otherwise.



