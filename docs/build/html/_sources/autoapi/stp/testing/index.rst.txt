:py:mod:`stp.testing`
=====================

.. py:module:: stp.testing


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   stp.testing.generate_test_robot
   stp.testing.generate_test_ball
   stp.testing.generate_divA_field
   stp.testing.generate_divB_field
   stp.testing.generate_our_field
   stp.testing.generate_test_playing_gameinfo
   stp.testing.generate_test_worldstate



Attributes
~~~~~~~~~~

.. autoapisummary::

   stp.testing.RobotId


.. py:data:: RobotId
   

   

.. py:function:: generate_test_robot(robot_id: RobotId, is_ours: bool = True, pose: numpy.ndarray = np.array([0.0, 0.0, 0.0]), twist: numpy.ndarray = np.array([0.0, 0.0, 0.0]), has_ball_sense=False)

   Returns a robot with default options for use in testing


.. py:function:: generate_test_ball(pos: numpy.ndarray = np.array([0.0, 0.0]), vel: numpy.ndarray = np.array([0.0, 0.0]), visible: bool = True)


.. py:function:: generate_divA_field()

   Generate a division A field

   Penalty distances and "goal_flat" need to be fixed


.. py:function:: generate_divB_field()

   Generate a division B field

   Penalty distances and "goal_flat" need to be fixea

   Note, penalty distances are width and deapth of the penalty area


.. py:function:: generate_our_field()

   Generates the practice field that we have


.. py:function:: generate_test_playing_gameinfo()


.. py:function:: generate_test_worldstate(our_robots=[], their_robots=[], ball=generate_test_ball(), game_info=generate_test_playing_gameinfo(), field=generate_divB_field(), goalie_id=0)

   generates a test worldstate


